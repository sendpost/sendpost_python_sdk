# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsCity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city_id': 'int',
        'continent_code': 'str',
        'country_code': 'str',
        'postal_code': 'str',
        'time_zone': 'str'
    }

    attribute_map = {
        'city_id': 'cityID',
        'continent_code': 'continentCode',
        'country_code': 'countryCode',
        'postal_code': 'postalCode',
        'time_zone': 'timeZone'
    }

    def __init__(self, city_id=None, continent_code=None, country_code=None, postal_code=None, time_zone=None):  # noqa: E501
        """ModelsCity - a model defined in Swagger"""  # noqa: E501

        self._city_id = None
        self._continent_code = None
        self._country_code = None
        self._postal_code = None
        self._time_zone = None
        self.discriminator = None

        if city_id is not None:
            self.city_id = city_id
        if continent_code is not None:
            self.continent_code = continent_code
        if country_code is not None:
            self.country_code = country_code
        if postal_code is not None:
            self.postal_code = postal_code
        if time_zone is not None:
            self.time_zone = time_zone

    @property
    def city_id(self):
        """Gets the city_id of this ModelsCity.  # noqa: E501


        :return: The city_id of this ModelsCity.  # noqa: E501
        :rtype: int
        """
        return self._city_id

    @city_id.setter
    def city_id(self, city_id):
        """Sets the city_id of this ModelsCity.


        :param city_id: The city_id of this ModelsCity.  # noqa: E501
        :type: int
        """

        self._city_id = city_id

    @property
    def continent_code(self):
        """Gets the continent_code of this ModelsCity.  # noqa: E501


        :return: The continent_code of this ModelsCity.  # noqa: E501
        :rtype: str
        """
        return self._continent_code

    @continent_code.setter
    def continent_code(self, continent_code):
        """Sets the continent_code of this ModelsCity.


        :param continent_code: The continent_code of this ModelsCity.  # noqa: E501
        :type: str
        """

        self._continent_code = continent_code

    @property
    def country_code(self):
        """Gets the country_code of this ModelsCity.  # noqa: E501


        :return: The country_code of this ModelsCity.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ModelsCity.


        :param country_code: The country_code of this ModelsCity.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def postal_code(self):
        """Gets the postal_code of this ModelsCity.  # noqa: E501


        :return: The postal_code of this ModelsCity.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ModelsCity.


        :param postal_code: The postal_code of this ModelsCity.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def time_zone(self):
        """Gets the time_zone of this ModelsCity.  # noqa: E501


        :return: The time_zone of this ModelsCity.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ModelsCity.


        :param time_zone: The time_zone of this ModelsCity.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsCity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsCity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
