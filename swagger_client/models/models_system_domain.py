# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsSystemDomain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'int',
        'dkim': 'ModelsSystemDNSRecord',
        'dkim_config': 'str',
        'dkim_verified': 'bool',
        'id': 'int',
        'mailbox_verified': 'bool',
        'name': 'str',
        'spf': 'ModelsSystemDNSRecord',
        'spf_verified': 'bool',
        'track': 'ModelsSystemDNSRecord',
        'track_verified': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'dkim': 'dkim',
        'dkim_config': 'dkimConfig',
        'dkim_verified': 'dkimVerified',
        'id': 'id',
        'mailbox_verified': 'mailboxVerified',
        'name': 'name',
        'spf': 'spf',
        'spf_verified': 'spfVerified',
        'track': 'track',
        'track_verified': 'trackVerified'
    }

    def __init__(self, created=None, dkim=None, dkim_config=None, dkim_verified=None, id=None, mailbox_verified=None, name=None, spf=None, spf_verified=None, track=None, track_verified=None):  # noqa: E501
        """ModelsSystemDomain - a model defined in Swagger"""  # noqa: E501

        self._created = None
        self._dkim = None
        self._dkim_config = None
        self._dkim_verified = None
        self._id = None
        self._mailbox_verified = None
        self._name = None
        self._spf = None
        self._spf_verified = None
        self._track = None
        self._track_verified = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if dkim is not None:
            self.dkim = dkim
        if dkim_config is not None:
            self.dkim_config = dkim_config
        if dkim_verified is not None:
            self.dkim_verified = dkim_verified
        if id is not None:
            self.id = id
        if mailbox_verified is not None:
            self.mailbox_verified = mailbox_verified
        if name is not None:
            self.name = name
        if spf is not None:
            self.spf = spf
        if spf_verified is not None:
            self.spf_verified = spf_verified
        if track is not None:
            self.track = track
        if track_verified is not None:
            self.track_verified = track_verified

    @property
    def created(self):
        """Gets the created of this ModelsSystemDomain.  # noqa: E501


        :return: The created of this ModelsSystemDomain.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ModelsSystemDomain.


        :param created: The created of this ModelsSystemDomain.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def dkim(self):
        """Gets the dkim of this ModelsSystemDomain.  # noqa: E501


        :return: The dkim of this ModelsSystemDomain.  # noqa: E501
        :rtype: ModelsSystemDNSRecord
        """
        return self._dkim

    @dkim.setter
    def dkim(self, dkim):
        """Sets the dkim of this ModelsSystemDomain.


        :param dkim: The dkim of this ModelsSystemDomain.  # noqa: E501
        :type: ModelsSystemDNSRecord
        """

        self._dkim = dkim

    @property
    def dkim_config(self):
        """Gets the dkim_config of this ModelsSystemDomain.  # noqa: E501


        :return: The dkim_config of this ModelsSystemDomain.  # noqa: E501
        :rtype: str
        """
        return self._dkim_config

    @dkim_config.setter
    def dkim_config(self, dkim_config):
        """Sets the dkim_config of this ModelsSystemDomain.


        :param dkim_config: The dkim_config of this ModelsSystemDomain.  # noqa: E501
        :type: str
        """

        self._dkim_config = dkim_config

    @property
    def dkim_verified(self):
        """Gets the dkim_verified of this ModelsSystemDomain.  # noqa: E501


        :return: The dkim_verified of this ModelsSystemDomain.  # noqa: E501
        :rtype: bool
        """
        return self._dkim_verified

    @dkim_verified.setter
    def dkim_verified(self, dkim_verified):
        """Sets the dkim_verified of this ModelsSystemDomain.


        :param dkim_verified: The dkim_verified of this ModelsSystemDomain.  # noqa: E501
        :type: bool
        """

        self._dkim_verified = dkim_verified

    @property
    def id(self):
        """Gets the id of this ModelsSystemDomain.  # noqa: E501


        :return: The id of this ModelsSystemDomain.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsSystemDomain.


        :param id: The id of this ModelsSystemDomain.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mailbox_verified(self):
        """Gets the mailbox_verified of this ModelsSystemDomain.  # noqa: E501


        :return: The mailbox_verified of this ModelsSystemDomain.  # noqa: E501
        :rtype: bool
        """
        return self._mailbox_verified

    @mailbox_verified.setter
    def mailbox_verified(self, mailbox_verified):
        """Sets the mailbox_verified of this ModelsSystemDomain.


        :param mailbox_verified: The mailbox_verified of this ModelsSystemDomain.  # noqa: E501
        :type: bool
        """

        self._mailbox_verified = mailbox_verified

    @property
    def name(self):
        """Gets the name of this ModelsSystemDomain.  # noqa: E501


        :return: The name of this ModelsSystemDomain.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsSystemDomain.


        :param name: The name of this ModelsSystemDomain.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def spf(self):
        """Gets the spf of this ModelsSystemDomain.  # noqa: E501


        :return: The spf of this ModelsSystemDomain.  # noqa: E501
        :rtype: ModelsSystemDNSRecord
        """
        return self._spf

    @spf.setter
    def spf(self, spf):
        """Sets the spf of this ModelsSystemDomain.


        :param spf: The spf of this ModelsSystemDomain.  # noqa: E501
        :type: ModelsSystemDNSRecord
        """

        self._spf = spf

    @property
    def spf_verified(self):
        """Gets the spf_verified of this ModelsSystemDomain.  # noqa: E501


        :return: The spf_verified of this ModelsSystemDomain.  # noqa: E501
        :rtype: bool
        """
        return self._spf_verified

    @spf_verified.setter
    def spf_verified(self, spf_verified):
        """Sets the spf_verified of this ModelsSystemDomain.


        :param spf_verified: The spf_verified of this ModelsSystemDomain.  # noqa: E501
        :type: bool
        """

        self._spf_verified = spf_verified

    @property
    def track(self):
        """Gets the track of this ModelsSystemDomain.  # noqa: E501


        :return: The track of this ModelsSystemDomain.  # noqa: E501
        :rtype: ModelsSystemDNSRecord
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this ModelsSystemDomain.


        :param track: The track of this ModelsSystemDomain.  # noqa: E501
        :type: ModelsSystemDNSRecord
        """

        self._track = track

    @property
    def track_verified(self):
        """Gets the track_verified of this ModelsSystemDomain.  # noqa: E501


        :return: The track_verified of this ModelsSystemDomain.  # noqa: E501
        :rtype: bool
        """
        return self._track_verified

    @track_verified.setter
    def track_verified(self, track_verified):
        """Sets the track_verified of this ModelsSystemDomain.


        :param track_verified: The track_verified of this ModelsSystemDomain.  # noqa: E501
        :type: bool
        """

        self._track_verified = track_verified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsSystemDomain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsSystemDomain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
