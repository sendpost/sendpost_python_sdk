# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsQEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'event_id': 'str',
        'event_metadata': 'ModelsEventMetadata',
        '_from': 'str',
        'groups': 'object',
        'ip_id': 'int',
        'message_id': 'str',
        'message_type': 'str',
        'sub_account_id': 'int',
        'submitted_at': 'int',
        'to': 'str',
        'type': 'int'
    }

    attribute_map = {
        'account_id': 'accountID',
        'event_id': 'eventID',
        'event_metadata': 'eventMetadata',
        '_from': 'from',
        'groups': 'groups',
        'ip_id': 'ipID',
        'message_id': 'messageID',
        'message_type': 'messageType',
        'sub_account_id': 'subAccountID',
        'submitted_at': 'submittedAt',
        'to': 'to',
        'type': 'type'
    }

    def __init__(self, account_id=None, event_id=None, event_metadata=None, _from=None, groups=None, ip_id=None, message_id=None, message_type=None, sub_account_id=None, submitted_at=None, to=None, type=None):  # noqa: E501
        """ModelsQEvent - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._event_id = None
        self._event_metadata = None
        self.__from = None
        self._groups = None
        self._ip_id = None
        self._message_id = None
        self._message_type = None
        self._sub_account_id = None
        self._submitted_at = None
        self._to = None
        self._type = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if event_id is not None:
            self.event_id = event_id
        if event_metadata is not None:
            self.event_metadata = event_metadata
        if _from is not None:
            self._from = _from
        if groups is not None:
            self.groups = groups
        if ip_id is not None:
            self.ip_id = ip_id
        if message_id is not None:
            self.message_id = message_id
        if message_type is not None:
            self.message_type = message_type
        if sub_account_id is not None:
            self.sub_account_id = sub_account_id
        if submitted_at is not None:
            self.submitted_at = submitted_at
        if to is not None:
            self.to = to
        if type is not None:
            self.type = type

    @property
    def account_id(self):
        """Gets the account_id of this ModelsQEvent.  # noqa: E501


        :return: The account_id of this ModelsQEvent.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ModelsQEvent.


        :param account_id: The account_id of this ModelsQEvent.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def event_id(self):
        """Gets the event_id of this ModelsQEvent.  # noqa: E501


        :return: The event_id of this ModelsQEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this ModelsQEvent.


        :param event_id: The event_id of this ModelsQEvent.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    @property
    def event_metadata(self):
        """Gets the event_metadata of this ModelsQEvent.  # noqa: E501


        :return: The event_metadata of this ModelsQEvent.  # noqa: E501
        :rtype: ModelsEventMetadata
        """
        return self._event_metadata

    @event_metadata.setter
    def event_metadata(self, event_metadata):
        """Sets the event_metadata of this ModelsQEvent.


        :param event_metadata: The event_metadata of this ModelsQEvent.  # noqa: E501
        :type: ModelsEventMetadata
        """

        self._event_metadata = event_metadata

    @property
    def _from(self):
        """Gets the _from of this ModelsQEvent.  # noqa: E501


        :return: The _from of this ModelsQEvent.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ModelsQEvent.


        :param _from: The _from of this ModelsQEvent.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def groups(self):
        """Gets the groups of this ModelsQEvent.  # noqa: E501


        :return: The groups of this ModelsQEvent.  # noqa: E501
        :rtype: object
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ModelsQEvent.


        :param groups: The groups of this ModelsQEvent.  # noqa: E501
        :type: object
        """

        self._groups = groups

    @property
    def ip_id(self):
        """Gets the ip_id of this ModelsQEvent.  # noqa: E501


        :return: The ip_id of this ModelsQEvent.  # noqa: E501
        :rtype: int
        """
        return self._ip_id

    @ip_id.setter
    def ip_id(self, ip_id):
        """Sets the ip_id of this ModelsQEvent.


        :param ip_id: The ip_id of this ModelsQEvent.  # noqa: E501
        :type: int
        """

        self._ip_id = ip_id

    @property
    def message_id(self):
        """Gets the message_id of this ModelsQEvent.  # noqa: E501


        :return: The message_id of this ModelsQEvent.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this ModelsQEvent.


        :param message_id: The message_id of this ModelsQEvent.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def message_type(self):
        """Gets the message_type of this ModelsQEvent.  # noqa: E501


        :return: The message_type of this ModelsQEvent.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this ModelsQEvent.


        :param message_type: The message_type of this ModelsQEvent.  # noqa: E501
        :type: str
        """

        self._message_type = message_type

    @property
    def sub_account_id(self):
        """Gets the sub_account_id of this ModelsQEvent.  # noqa: E501


        :return: The sub_account_id of this ModelsQEvent.  # noqa: E501
        :rtype: int
        """
        return self._sub_account_id

    @sub_account_id.setter
    def sub_account_id(self, sub_account_id):
        """Sets the sub_account_id of this ModelsQEvent.


        :param sub_account_id: The sub_account_id of this ModelsQEvent.  # noqa: E501
        :type: int
        """

        self._sub_account_id = sub_account_id

    @property
    def submitted_at(self):
        """Gets the submitted_at of this ModelsQEvent.  # noqa: E501


        :return: The submitted_at of this ModelsQEvent.  # noqa: E501
        :rtype: int
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this ModelsQEvent.


        :param submitted_at: The submitted_at of this ModelsQEvent.  # noqa: E501
        :type: int
        """

        self._submitted_at = submitted_at

    @property
    def to(self):
        """Gets the to of this ModelsQEvent.  # noqa: E501


        :return: The to of this ModelsQEvent.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ModelsQEvent.


        :param to: The to of this ModelsQEvent.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def type(self):
        """Gets the type of this ModelsQEvent.  # noqa: E501


        :return: The type of this ModelsQEvent.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelsQEvent.


        :param type: The type of this ModelsQEvent.  # noqa: E501
        :type: int
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsQEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsQEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
