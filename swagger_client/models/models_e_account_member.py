# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsEAccountMember(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_name': 'str',
        'current_email_service_provider': 'str',
        'industry': 'str',
        'logo_url': 'str',
        'name': 'str',
        'onboard_c_finished': 'bool',
        'onboard_q_answered': 'bool',
        'phone_number': 'str',
        'sending_volume_per_month': 'str',
        'uid': 'str',
        'verify_email': 'bool'
    }

    attribute_map = {
        'company_name': 'companyName',
        'current_email_service_provider': 'currentEmailServiceProvider',
        'industry': 'industry',
        'logo_url': 'logoURL',
        'name': 'name',
        'onboard_c_finished': 'onboardCFinished',
        'onboard_q_answered': 'onboardQAnswered',
        'phone_number': 'phoneNumber',
        'sending_volume_per_month': 'sendingVolumePerMonth',
        'uid': 'uid',
        'verify_email': 'verifyEmail'
    }

    def __init__(self, company_name=None, current_email_service_provider=None, industry=None, logo_url=None, name=None, onboard_c_finished=None, onboard_q_answered=None, phone_number=None, sending_volume_per_month=None, uid=None, verify_email=None):  # noqa: E501
        """ModelsEAccountMember - a model defined in Swagger"""  # noqa: E501

        self._company_name = None
        self._current_email_service_provider = None
        self._industry = None
        self._logo_url = None
        self._name = None
        self._onboard_c_finished = None
        self._onboard_q_answered = None
        self._phone_number = None
        self._sending_volume_per_month = None
        self._uid = None
        self._verify_email = None
        self.discriminator = None

        if company_name is not None:
            self.company_name = company_name
        if current_email_service_provider is not None:
            self.current_email_service_provider = current_email_service_provider
        if industry is not None:
            self.industry = industry
        if logo_url is not None:
            self.logo_url = logo_url
        if name is not None:
            self.name = name
        if onboard_c_finished is not None:
            self.onboard_c_finished = onboard_c_finished
        if onboard_q_answered is not None:
            self.onboard_q_answered = onboard_q_answered
        if phone_number is not None:
            self.phone_number = phone_number
        if sending_volume_per_month is not None:
            self.sending_volume_per_month = sending_volume_per_month
        if uid is not None:
            self.uid = uid
        if verify_email is not None:
            self.verify_email = verify_email

    @property
    def company_name(self):
        """Gets the company_name of this ModelsEAccountMember.  # noqa: E501


        :return: The company_name of this ModelsEAccountMember.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ModelsEAccountMember.


        :param company_name: The company_name of this ModelsEAccountMember.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def current_email_service_provider(self):
        """Gets the current_email_service_provider of this ModelsEAccountMember.  # noqa: E501


        :return: The current_email_service_provider of this ModelsEAccountMember.  # noqa: E501
        :rtype: str
        """
        return self._current_email_service_provider

    @current_email_service_provider.setter
    def current_email_service_provider(self, current_email_service_provider):
        """Sets the current_email_service_provider of this ModelsEAccountMember.


        :param current_email_service_provider: The current_email_service_provider of this ModelsEAccountMember.  # noqa: E501
        :type: str
        """

        self._current_email_service_provider = current_email_service_provider

    @property
    def industry(self):
        """Gets the industry of this ModelsEAccountMember.  # noqa: E501


        :return: The industry of this ModelsEAccountMember.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this ModelsEAccountMember.


        :param industry: The industry of this ModelsEAccountMember.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def logo_url(self):
        """Gets the logo_url of this ModelsEAccountMember.  # noqa: E501


        :return: The logo_url of this ModelsEAccountMember.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this ModelsEAccountMember.


        :param logo_url: The logo_url of this ModelsEAccountMember.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def name(self):
        """Gets the name of this ModelsEAccountMember.  # noqa: E501


        :return: The name of this ModelsEAccountMember.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsEAccountMember.


        :param name: The name of this ModelsEAccountMember.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def onboard_c_finished(self):
        """Gets the onboard_c_finished of this ModelsEAccountMember.  # noqa: E501


        :return: The onboard_c_finished of this ModelsEAccountMember.  # noqa: E501
        :rtype: bool
        """
        return self._onboard_c_finished

    @onboard_c_finished.setter
    def onboard_c_finished(self, onboard_c_finished):
        """Sets the onboard_c_finished of this ModelsEAccountMember.


        :param onboard_c_finished: The onboard_c_finished of this ModelsEAccountMember.  # noqa: E501
        :type: bool
        """

        self._onboard_c_finished = onboard_c_finished

    @property
    def onboard_q_answered(self):
        """Gets the onboard_q_answered of this ModelsEAccountMember.  # noqa: E501


        :return: The onboard_q_answered of this ModelsEAccountMember.  # noqa: E501
        :rtype: bool
        """
        return self._onboard_q_answered

    @onboard_q_answered.setter
    def onboard_q_answered(self, onboard_q_answered):
        """Sets the onboard_q_answered of this ModelsEAccountMember.


        :param onboard_q_answered: The onboard_q_answered of this ModelsEAccountMember.  # noqa: E501
        :type: bool
        """

        self._onboard_q_answered = onboard_q_answered

    @property
    def phone_number(self):
        """Gets the phone_number of this ModelsEAccountMember.  # noqa: E501


        :return: The phone_number of this ModelsEAccountMember.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ModelsEAccountMember.


        :param phone_number: The phone_number of this ModelsEAccountMember.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def sending_volume_per_month(self):
        """Gets the sending_volume_per_month of this ModelsEAccountMember.  # noqa: E501


        :return: The sending_volume_per_month of this ModelsEAccountMember.  # noqa: E501
        :rtype: str
        """
        return self._sending_volume_per_month

    @sending_volume_per_month.setter
    def sending_volume_per_month(self, sending_volume_per_month):
        """Sets the sending_volume_per_month of this ModelsEAccountMember.


        :param sending_volume_per_month: The sending_volume_per_month of this ModelsEAccountMember.  # noqa: E501
        :type: str
        """

        self._sending_volume_per_month = sending_volume_per_month

    @property
    def uid(self):
        """Gets the uid of this ModelsEAccountMember.  # noqa: E501


        :return: The uid of this ModelsEAccountMember.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ModelsEAccountMember.


        :param uid: The uid of this ModelsEAccountMember.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def verify_email(self):
        """Gets the verify_email of this ModelsEAccountMember.  # noqa: E501


        :return: The verify_email of this ModelsEAccountMember.  # noqa: E501
        :rtype: bool
        """
        return self._verify_email

    @verify_email.setter
    def verify_email(self, verify_email):
        """Sets the verify_email of this ModelsEAccountMember.


        :param verify_email: The verify_email of this ModelsEAccountMember.  # noqa: E501
        :type: bool
        """

        self._verify_email = verify_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsEAccountMember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsEAccountMember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
