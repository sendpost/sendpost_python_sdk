# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsEventMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clicked_url': 'str',
        'device': 'UaparserDevice',
        'geo': 'ModelsCity',
        'os': 'UaparserOs',
        'smtp_code': 'int',
        'smtp_description': 'str',
        'user_agent': 'UaparserUserAgent'
    }

    attribute_map = {
        'clicked_url': 'clickedURL',
        'device': 'device',
        'geo': 'geo',
        'os': 'os',
        'smtp_code': 'smtpCode',
        'smtp_description': 'smtpDescription',
        'user_agent': 'userAgent'
    }

    def __init__(self, clicked_url=None, device=None, geo=None, os=None, smtp_code=None, smtp_description=None, user_agent=None):  # noqa: E501
        """ModelsEventMetadata - a model defined in Swagger"""  # noqa: E501

        self._clicked_url = None
        self._device = None
        self._geo = None
        self._os = None
        self._smtp_code = None
        self._smtp_description = None
        self._user_agent = None
        self.discriminator = None

        if clicked_url is not None:
            self.clicked_url = clicked_url
        if device is not None:
            self.device = device
        if geo is not None:
            self.geo = geo
        if os is not None:
            self.os = os
        if smtp_code is not None:
            self.smtp_code = smtp_code
        if smtp_description is not None:
            self.smtp_description = smtp_description
        if user_agent is not None:
            self.user_agent = user_agent

    @property
    def clicked_url(self):
        """Gets the clicked_url of this ModelsEventMetadata.  # noqa: E501


        :return: The clicked_url of this ModelsEventMetadata.  # noqa: E501
        :rtype: str
        """
        return self._clicked_url

    @clicked_url.setter
    def clicked_url(self, clicked_url):
        """Sets the clicked_url of this ModelsEventMetadata.


        :param clicked_url: The clicked_url of this ModelsEventMetadata.  # noqa: E501
        :type: str
        """

        self._clicked_url = clicked_url

    @property
    def device(self):
        """Gets the device of this ModelsEventMetadata.  # noqa: E501


        :return: The device of this ModelsEventMetadata.  # noqa: E501
        :rtype: UaparserDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this ModelsEventMetadata.


        :param device: The device of this ModelsEventMetadata.  # noqa: E501
        :type: UaparserDevice
        """

        self._device = device

    @property
    def geo(self):
        """Gets the geo of this ModelsEventMetadata.  # noqa: E501


        :return: The geo of this ModelsEventMetadata.  # noqa: E501
        :rtype: ModelsCity
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """Sets the geo of this ModelsEventMetadata.


        :param geo: The geo of this ModelsEventMetadata.  # noqa: E501
        :type: ModelsCity
        """

        self._geo = geo

    @property
    def os(self):
        """Gets the os of this ModelsEventMetadata.  # noqa: E501


        :return: The os of this ModelsEventMetadata.  # noqa: E501
        :rtype: UaparserOs
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this ModelsEventMetadata.


        :param os: The os of this ModelsEventMetadata.  # noqa: E501
        :type: UaparserOs
        """

        self._os = os

    @property
    def smtp_code(self):
        """Gets the smtp_code of this ModelsEventMetadata.  # noqa: E501


        :return: The smtp_code of this ModelsEventMetadata.  # noqa: E501
        :rtype: int
        """
        return self._smtp_code

    @smtp_code.setter
    def smtp_code(self, smtp_code):
        """Sets the smtp_code of this ModelsEventMetadata.


        :param smtp_code: The smtp_code of this ModelsEventMetadata.  # noqa: E501
        :type: int
        """

        self._smtp_code = smtp_code

    @property
    def smtp_description(self):
        """Gets the smtp_description of this ModelsEventMetadata.  # noqa: E501


        :return: The smtp_description of this ModelsEventMetadata.  # noqa: E501
        :rtype: str
        """
        return self._smtp_description

    @smtp_description.setter
    def smtp_description(self, smtp_description):
        """Sets the smtp_description of this ModelsEventMetadata.


        :param smtp_description: The smtp_description of this ModelsEventMetadata.  # noqa: E501
        :type: str
        """

        self._smtp_description = smtp_description

    @property
    def user_agent(self):
        """Gets the user_agent of this ModelsEventMetadata.  # noqa: E501


        :return: The user_agent of this ModelsEventMetadata.  # noqa: E501
        :rtype: UaparserUserAgent
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this ModelsEventMetadata.


        :param user_agent: The user_agent of this ModelsEventMetadata.  # noqa: E501
        :type: UaparserUserAgent
        """

        self._user_agent = user_agent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsEventMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsEventMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
