# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsRSuppression(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hard_bounce': 'list[ModelsSuppressionEmail]',
        'manual': 'list[ModelsSuppressionEmail]',
        'spam_complaint': 'list[ModelsSuppressionEmail]',
        'unsubscribe': 'list[ModelsSuppressionEmail]'
    }

    attribute_map = {
        'hard_bounce': 'hardBounce',
        'manual': 'manual',
        'spam_complaint': 'spamComplaint',
        'unsubscribe': 'unsubscribe'
    }

    def __init__(self, hard_bounce=None, manual=None, spam_complaint=None, unsubscribe=None):  # noqa: E501
        """ModelsRSuppression - a model defined in Swagger"""  # noqa: E501

        self._hard_bounce = None
        self._manual = None
        self._spam_complaint = None
        self._unsubscribe = None
        self.discriminator = None

        if hard_bounce is not None:
            self.hard_bounce = hard_bounce
        if manual is not None:
            self.manual = manual
        if spam_complaint is not None:
            self.spam_complaint = spam_complaint
        if unsubscribe is not None:
            self.unsubscribe = unsubscribe

    @property
    def hard_bounce(self):
        """Gets the hard_bounce of this ModelsRSuppression.  # noqa: E501


        :return: The hard_bounce of this ModelsRSuppression.  # noqa: E501
        :rtype: list[ModelsSuppressionEmail]
        """
        return self._hard_bounce

    @hard_bounce.setter
    def hard_bounce(self, hard_bounce):
        """Sets the hard_bounce of this ModelsRSuppression.


        :param hard_bounce: The hard_bounce of this ModelsRSuppression.  # noqa: E501
        :type: list[ModelsSuppressionEmail]
        """

        self._hard_bounce = hard_bounce

    @property
    def manual(self):
        """Gets the manual of this ModelsRSuppression.  # noqa: E501


        :return: The manual of this ModelsRSuppression.  # noqa: E501
        :rtype: list[ModelsSuppressionEmail]
        """
        return self._manual

    @manual.setter
    def manual(self, manual):
        """Sets the manual of this ModelsRSuppression.


        :param manual: The manual of this ModelsRSuppression.  # noqa: E501
        :type: list[ModelsSuppressionEmail]
        """

        self._manual = manual

    @property
    def spam_complaint(self):
        """Gets the spam_complaint of this ModelsRSuppression.  # noqa: E501


        :return: The spam_complaint of this ModelsRSuppression.  # noqa: E501
        :rtype: list[ModelsSuppressionEmail]
        """
        return self._spam_complaint

    @spam_complaint.setter
    def spam_complaint(self, spam_complaint):
        """Sets the spam_complaint of this ModelsRSuppression.


        :param spam_complaint: The spam_complaint of this ModelsRSuppression.  # noqa: E501
        :type: list[ModelsSuppressionEmail]
        """

        self._spam_complaint = spam_complaint

    @property
    def unsubscribe(self):
        """Gets the unsubscribe of this ModelsRSuppression.  # noqa: E501


        :return: The unsubscribe of this ModelsRSuppression.  # noqa: E501
        :rtype: list[ModelsSuppressionEmail]
        """
        return self._unsubscribe

    @unsubscribe.setter
    def unsubscribe(self, unsubscribe):
        """Sets the unsubscribe of this ModelsRSuppression.


        :param unsubscribe: The unsubscribe of this ModelsRSuppression.  # noqa: E501
        :type: list[ModelsSuppressionEmail]
        """

        self._unsubscribe = unsubscribe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsRSuppression, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsRSuppression):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
