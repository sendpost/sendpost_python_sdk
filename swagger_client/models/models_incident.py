# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsIncident(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'ModelsMember',
        'created': 'int',
        'description': 'str',
        'id': 'int',
        'related_ip': 'ModelsIP',
        'related_sub_account': 'ModelsSubAccount',
        'status': 'ModelsIncidentStatus',
        'summary': 'str',
        'tags': 'list[ModelsTag]',
        'updated': 'int'
    }

    attribute_map = {
        'author': 'author',
        'created': 'created',
        'description': 'description',
        'id': 'id',
        'related_ip': 'relatedIP',
        'related_sub_account': 'relatedSubAccount',
        'status': 'status',
        'summary': 'summary',
        'tags': 'tags',
        'updated': 'updated'
    }

    def __init__(self, author=None, created=None, description=None, id=None, related_ip=None, related_sub_account=None, status=None, summary=None, tags=None, updated=None):  # noqa: E501
        """ModelsIncident - a model defined in Swagger"""  # noqa: E501

        self._author = None
        self._created = None
        self._description = None
        self._id = None
        self._related_ip = None
        self._related_sub_account = None
        self._status = None
        self._summary = None
        self._tags = None
        self._updated = None
        self.discriminator = None

        if author is not None:
            self.author = author
        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if related_ip is not None:
            self.related_ip = related_ip
        if related_sub_account is not None:
            self.related_sub_account = related_sub_account
        if status is not None:
            self.status = status
        if summary is not None:
            self.summary = summary
        if tags is not None:
            self.tags = tags
        if updated is not None:
            self.updated = updated

    @property
    def author(self):
        """Gets the author of this ModelsIncident.  # noqa: E501


        :return: The author of this ModelsIncident.  # noqa: E501
        :rtype: ModelsMember
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ModelsIncident.


        :param author: The author of this ModelsIncident.  # noqa: E501
        :type: ModelsMember
        """

        self._author = author

    @property
    def created(self):
        """Gets the created of this ModelsIncident.  # noqa: E501


        :return: The created of this ModelsIncident.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ModelsIncident.


        :param created: The created of this ModelsIncident.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this ModelsIncident.  # noqa: E501


        :return: The description of this ModelsIncident.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelsIncident.


        :param description: The description of this ModelsIncident.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ModelsIncident.  # noqa: E501


        :return: The id of this ModelsIncident.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsIncident.


        :param id: The id of this ModelsIncident.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def related_ip(self):
        """Gets the related_ip of this ModelsIncident.  # noqa: E501


        :return: The related_ip of this ModelsIncident.  # noqa: E501
        :rtype: ModelsIP
        """
        return self._related_ip

    @related_ip.setter
    def related_ip(self, related_ip):
        """Sets the related_ip of this ModelsIncident.


        :param related_ip: The related_ip of this ModelsIncident.  # noqa: E501
        :type: ModelsIP
        """

        self._related_ip = related_ip

    @property
    def related_sub_account(self):
        """Gets the related_sub_account of this ModelsIncident.  # noqa: E501


        :return: The related_sub_account of this ModelsIncident.  # noqa: E501
        :rtype: ModelsSubAccount
        """
        return self._related_sub_account

    @related_sub_account.setter
    def related_sub_account(self, related_sub_account):
        """Sets the related_sub_account of this ModelsIncident.


        :param related_sub_account: The related_sub_account of this ModelsIncident.  # noqa: E501
        :type: ModelsSubAccount
        """

        self._related_sub_account = related_sub_account

    @property
    def status(self):
        """Gets the status of this ModelsIncident.  # noqa: E501


        :return: The status of this ModelsIncident.  # noqa: E501
        :rtype: ModelsIncidentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelsIncident.


        :param status: The status of this ModelsIncident.  # noqa: E501
        :type: ModelsIncidentStatus
        """

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this ModelsIncident.  # noqa: E501


        :return: The summary of this ModelsIncident.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ModelsIncident.


        :param summary: The summary of this ModelsIncident.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def tags(self):
        """Gets the tags of this ModelsIncident.  # noqa: E501


        :return: The tags of this ModelsIncident.  # noqa: E501
        :rtype: list[ModelsTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ModelsIncident.


        :param tags: The tags of this ModelsIncident.  # noqa: E501
        :type: list[ModelsTag]
        """

        self._tags = tags

    @property
    def updated(self):
        """Gets the updated of this ModelsIncident.  # noqa: E501


        :return: The updated of this ModelsIncident.  # noqa: E501
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ModelsIncident.


        :param updated: The updated of this ModelsIncident.  # noqa: E501
        :type: int
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsIncident, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsIncident):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
