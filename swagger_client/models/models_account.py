# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'created': 'int',
        'current_email_service_provider': 'str',
        'id': 'int',
        'industry': 'str',
        'is_canceled': 'bool',
        'is_last_payment_failed': 'bool',
        'is_upgraded': 'bool',
        'lock_threshold': 'int',
        'locked': 'bool',
        'name': 'str',
        'onboard_c_finished': 'bool',
        'onboard_q_answered': 'bool',
        'sending_volume_per_month': 'str',
        'url': 'str'
    }

    attribute_map = {
        'api_key': 'apiKey',
        'created': 'created',
        'current_email_service_provider': 'currentEmailServiceProvider',
        'id': 'id',
        'industry': 'industry',
        'is_canceled': 'isCanceled',
        'is_last_payment_failed': 'isLastPaymentFailed',
        'is_upgraded': 'isUpgraded',
        'lock_threshold': 'lockThreshold',
        'locked': 'locked',
        'name': 'name',
        'onboard_c_finished': 'onboardCFinished',
        'onboard_q_answered': 'onboardQAnswered',
        'sending_volume_per_month': 'sendingVolumePerMonth',
        'url': 'url'
    }

    def __init__(self, api_key=None, created=None, current_email_service_provider=None, id=None, industry=None, is_canceled=None, is_last_payment_failed=None, is_upgraded=None, lock_threshold=None, locked=None, name=None, onboard_c_finished=None, onboard_q_answered=None, sending_volume_per_month=None, url=None):  # noqa: E501
        """ModelsAccount - a model defined in Swagger"""  # noqa: E501

        self._api_key = None
        self._created = None
        self._current_email_service_provider = None
        self._id = None
        self._industry = None
        self._is_canceled = None
        self._is_last_payment_failed = None
        self._is_upgraded = None
        self._lock_threshold = None
        self._locked = None
        self._name = None
        self._onboard_c_finished = None
        self._onboard_q_answered = None
        self._sending_volume_per_month = None
        self._url = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if created is not None:
            self.created = created
        if current_email_service_provider is not None:
            self.current_email_service_provider = current_email_service_provider
        if id is not None:
            self.id = id
        if industry is not None:
            self.industry = industry
        if is_canceled is not None:
            self.is_canceled = is_canceled
        if is_last_payment_failed is not None:
            self.is_last_payment_failed = is_last_payment_failed
        if is_upgraded is not None:
            self.is_upgraded = is_upgraded
        if lock_threshold is not None:
            self.lock_threshold = lock_threshold
        if locked is not None:
            self.locked = locked
        if name is not None:
            self.name = name
        if onboard_c_finished is not None:
            self.onboard_c_finished = onboard_c_finished
        if onboard_q_answered is not None:
            self.onboard_q_answered = onboard_q_answered
        if sending_volume_per_month is not None:
            self.sending_volume_per_month = sending_volume_per_month
        if url is not None:
            self.url = url

    @property
    def api_key(self):
        """Gets the api_key of this ModelsAccount.  # noqa: E501


        :return: The api_key of this ModelsAccount.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ModelsAccount.


        :param api_key: The api_key of this ModelsAccount.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def created(self):
        """Gets the created of this ModelsAccount.  # noqa: E501


        :return: The created of this ModelsAccount.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ModelsAccount.


        :param created: The created of this ModelsAccount.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def current_email_service_provider(self):
        """Gets the current_email_service_provider of this ModelsAccount.  # noqa: E501


        :return: The current_email_service_provider of this ModelsAccount.  # noqa: E501
        :rtype: str
        """
        return self._current_email_service_provider

    @current_email_service_provider.setter
    def current_email_service_provider(self, current_email_service_provider):
        """Sets the current_email_service_provider of this ModelsAccount.


        :param current_email_service_provider: The current_email_service_provider of this ModelsAccount.  # noqa: E501
        :type: str
        """

        self._current_email_service_provider = current_email_service_provider

    @property
    def id(self):
        """Gets the id of this ModelsAccount.  # noqa: E501


        :return: The id of this ModelsAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsAccount.


        :param id: The id of this ModelsAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def industry(self):
        """Gets the industry of this ModelsAccount.  # noqa: E501


        :return: The industry of this ModelsAccount.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this ModelsAccount.


        :param industry: The industry of this ModelsAccount.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def is_canceled(self):
        """Gets the is_canceled of this ModelsAccount.  # noqa: E501


        :return: The is_canceled of this ModelsAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_canceled

    @is_canceled.setter
    def is_canceled(self, is_canceled):
        """Sets the is_canceled of this ModelsAccount.


        :param is_canceled: The is_canceled of this ModelsAccount.  # noqa: E501
        :type: bool
        """

        self._is_canceled = is_canceled

    @property
    def is_last_payment_failed(self):
        """Gets the is_last_payment_failed of this ModelsAccount.  # noqa: E501


        :return: The is_last_payment_failed of this ModelsAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_last_payment_failed

    @is_last_payment_failed.setter
    def is_last_payment_failed(self, is_last_payment_failed):
        """Sets the is_last_payment_failed of this ModelsAccount.


        :param is_last_payment_failed: The is_last_payment_failed of this ModelsAccount.  # noqa: E501
        :type: bool
        """

        self._is_last_payment_failed = is_last_payment_failed

    @property
    def is_upgraded(self):
        """Gets the is_upgraded of this ModelsAccount.  # noqa: E501


        :return: The is_upgraded of this ModelsAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_upgraded

    @is_upgraded.setter
    def is_upgraded(self, is_upgraded):
        """Sets the is_upgraded of this ModelsAccount.


        :param is_upgraded: The is_upgraded of this ModelsAccount.  # noqa: E501
        :type: bool
        """

        self._is_upgraded = is_upgraded

    @property
    def lock_threshold(self):
        """Gets the lock_threshold of this ModelsAccount.  # noqa: E501


        :return: The lock_threshold of this ModelsAccount.  # noqa: E501
        :rtype: int
        """
        return self._lock_threshold

    @lock_threshold.setter
    def lock_threshold(self, lock_threshold):
        """Sets the lock_threshold of this ModelsAccount.


        :param lock_threshold: The lock_threshold of this ModelsAccount.  # noqa: E501
        :type: int
        """

        self._lock_threshold = lock_threshold

    @property
    def locked(self):
        """Gets the locked of this ModelsAccount.  # noqa: E501


        :return: The locked of this ModelsAccount.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this ModelsAccount.


        :param locked: The locked of this ModelsAccount.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def name(self):
        """Gets the name of this ModelsAccount.  # noqa: E501


        :return: The name of this ModelsAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsAccount.


        :param name: The name of this ModelsAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def onboard_c_finished(self):
        """Gets the onboard_c_finished of this ModelsAccount.  # noqa: E501


        :return: The onboard_c_finished of this ModelsAccount.  # noqa: E501
        :rtype: bool
        """
        return self._onboard_c_finished

    @onboard_c_finished.setter
    def onboard_c_finished(self, onboard_c_finished):
        """Sets the onboard_c_finished of this ModelsAccount.


        :param onboard_c_finished: The onboard_c_finished of this ModelsAccount.  # noqa: E501
        :type: bool
        """

        self._onboard_c_finished = onboard_c_finished

    @property
    def onboard_q_answered(self):
        """Gets the onboard_q_answered of this ModelsAccount.  # noqa: E501


        :return: The onboard_q_answered of this ModelsAccount.  # noqa: E501
        :rtype: bool
        """
        return self._onboard_q_answered

    @onboard_q_answered.setter
    def onboard_q_answered(self, onboard_q_answered):
        """Sets the onboard_q_answered of this ModelsAccount.


        :param onboard_q_answered: The onboard_q_answered of this ModelsAccount.  # noqa: E501
        :type: bool
        """

        self._onboard_q_answered = onboard_q_answered

    @property
    def sending_volume_per_month(self):
        """Gets the sending_volume_per_month of this ModelsAccount.  # noqa: E501


        :return: The sending_volume_per_month of this ModelsAccount.  # noqa: E501
        :rtype: str
        """
        return self._sending_volume_per_month

    @sending_volume_per_month.setter
    def sending_volume_per_month(self, sending_volume_per_month):
        """Sets the sending_volume_per_month of this ModelsAccount.


        :param sending_volume_per_month: The sending_volume_per_month of this ModelsAccount.  # noqa: E501
        :type: str
        """

        self._sending_volume_per_month = sending_volume_per_month

    @property
    def url(self):
        """Gets the url of this ModelsAccount.  # noqa: E501


        :return: The url of this ModelsAccount.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ModelsAccount.


        :param url: The url of this ModelsAccount.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
