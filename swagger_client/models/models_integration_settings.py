# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsIntegrationSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_enable_monitoring': 'bool',
        'email_to': 'list[str]',
        'frequency': 'ModelsFrequencyType',
        'receive_reports': 'bool'
    }

    attribute_map = {
        'auto_enable_monitoring': 'autoEnableMonitoring',
        'email_to': 'emailTo',
        'frequency': 'frequency',
        'receive_reports': 'receiveReports'
    }

    def __init__(self, auto_enable_monitoring=None, email_to=None, frequency=None, receive_reports=None):  # noqa: E501
        """ModelsIntegrationSettings - a model defined in Swagger"""  # noqa: E501

        self._auto_enable_monitoring = None
        self._email_to = None
        self._frequency = None
        self._receive_reports = None
        self.discriminator = None

        if auto_enable_monitoring is not None:
            self.auto_enable_monitoring = auto_enable_monitoring
        if email_to is not None:
            self.email_to = email_to
        if frequency is not None:
            self.frequency = frequency
        if receive_reports is not None:
            self.receive_reports = receive_reports

    @property
    def auto_enable_monitoring(self):
        """Gets the auto_enable_monitoring of this ModelsIntegrationSettings.  # noqa: E501


        :return: The auto_enable_monitoring of this ModelsIntegrationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_enable_monitoring

    @auto_enable_monitoring.setter
    def auto_enable_monitoring(self, auto_enable_monitoring):
        """Sets the auto_enable_monitoring of this ModelsIntegrationSettings.


        :param auto_enable_monitoring: The auto_enable_monitoring of this ModelsIntegrationSettings.  # noqa: E501
        :type: bool
        """

        self._auto_enable_monitoring = auto_enable_monitoring

    @property
    def email_to(self):
        """Gets the email_to of this ModelsIntegrationSettings.  # noqa: E501


        :return: The email_to of this ModelsIntegrationSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._email_to

    @email_to.setter
    def email_to(self, email_to):
        """Sets the email_to of this ModelsIntegrationSettings.


        :param email_to: The email_to of this ModelsIntegrationSettings.  # noqa: E501
        :type: list[str]
        """

        self._email_to = email_to

    @property
    def frequency(self):
        """Gets the frequency of this ModelsIntegrationSettings.  # noqa: E501


        :return: The frequency of this ModelsIntegrationSettings.  # noqa: E501
        :rtype: ModelsFrequencyType
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ModelsIntegrationSettings.


        :param frequency: The frequency of this ModelsIntegrationSettings.  # noqa: E501
        :type: ModelsFrequencyType
        """

        self._frequency = frequency

    @property
    def receive_reports(self):
        """Gets the receive_reports of this ModelsIntegrationSettings.  # noqa: E501


        :return: The receive_reports of this ModelsIntegrationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._receive_reports

    @receive_reports.setter
    def receive_reports(self, receive_reports):
        """Sets the receive_reports of this ModelsIntegrationSettings.


        :param receive_reports: The receive_reports of this ModelsIntegrationSettings.  # noqa: E501
        :type: bool
        """

        self._receive_reports = receive_reports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsIntegrationSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsIntegrationSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
