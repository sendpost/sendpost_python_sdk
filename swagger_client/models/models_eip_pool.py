# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsEIPPool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ips': 'list[ModelsEIP]',
        'name': 'str',
        'routing_mapping': 'object',
        'routing_strategy': 'int'
    }

    attribute_map = {
        'ips': 'ips',
        'name': 'name',
        'routing_mapping': 'routingMapping',
        'routing_strategy': 'routingStrategy'
    }

    def __init__(self, ips=None, name=None, routing_mapping=None, routing_strategy=None):  # noqa: E501
        """ModelsEIPPool - a model defined in Swagger"""  # noqa: E501

        self._ips = None
        self._name = None
        self._routing_mapping = None
        self._routing_strategy = None
        self.discriminator = None

        if ips is not None:
            self.ips = ips
        if name is not None:
            self.name = name
        if routing_mapping is not None:
            self.routing_mapping = routing_mapping
        if routing_strategy is not None:
            self.routing_strategy = routing_strategy

    @property
    def ips(self):
        """Gets the ips of this ModelsEIPPool.  # noqa: E501


        :return: The ips of this ModelsEIPPool.  # noqa: E501
        :rtype: list[ModelsEIP]
        """
        return self._ips

    @ips.setter
    def ips(self, ips):
        """Sets the ips of this ModelsEIPPool.


        :param ips: The ips of this ModelsEIPPool.  # noqa: E501
        :type: list[ModelsEIP]
        """

        self._ips = ips

    @property
    def name(self):
        """Gets the name of this ModelsEIPPool.  # noqa: E501


        :return: The name of this ModelsEIPPool.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsEIPPool.


        :param name: The name of this ModelsEIPPool.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def routing_mapping(self):
        """Gets the routing_mapping of this ModelsEIPPool.  # noqa: E501


        :return: The routing_mapping of this ModelsEIPPool.  # noqa: E501
        :rtype: object
        """
        return self._routing_mapping

    @routing_mapping.setter
    def routing_mapping(self, routing_mapping):
        """Sets the routing_mapping of this ModelsEIPPool.


        :param routing_mapping: The routing_mapping of this ModelsEIPPool.  # noqa: E501
        :type: object
        """

        self._routing_mapping = routing_mapping

    @property
    def routing_strategy(self):
        """Gets the routing_strategy of this ModelsEIPPool.  # noqa: E501


        :return: The routing_strategy of this ModelsEIPPool.  # noqa: E501
        :rtype: int
        """
        return self._routing_strategy

    @routing_strategy.setter
    def routing_strategy(self, routing_strategy):
        """Sets the routing_strategy of this ModelsEIPPool.


        :param routing_strategy: The routing_strategy of this ModelsEIPPool.  # noqa: E501
        :type: int
        """

        self._routing_strategy = routing_strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsEIPPool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsEIPPool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
