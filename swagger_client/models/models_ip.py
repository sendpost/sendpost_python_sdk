# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsIP(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aol_settings': 'str',
        'auto_warmup_enabled': 'bool',
        'auto_warmup_stage': 'int',
        'comcast_settings': 'str',
        'created': 'int',
        'default_settings': 'str',
        'gmail_settings': 'str',
        'gmx_settings': 'str',
        'icloud_settings': 'str',
        'id': 'int',
        'mailru_settings': 'str',
        'microsoft_settings': 'str',
        'public_ip': 'str',
        'qq_settings': 'str',
        'reverse_dns_hostname': 'str',
        'system_domain': 'ModelsSystemDomain',
        'type': 'ModelsIPType',
        'yahoo_settings': 'str',
        'yandex_settings': 'str',
        'zoho_settings': 'str'
    }

    attribute_map = {
        'aol_settings': 'aolSettings',
        'auto_warmup_enabled': 'autoWarmupEnabled',
        'auto_warmup_stage': 'autoWarmupStage',
        'comcast_settings': 'comcastSettings',
        'created': 'created',
        'default_settings': 'defaultSettings',
        'gmail_settings': 'gmailSettings',
        'gmx_settings': 'gmxSettings',
        'icloud_settings': 'icloudSettings',
        'id': 'id',
        'mailru_settings': 'mailruSettings',
        'microsoft_settings': 'microsoftSettings',
        'public_ip': 'publicIP',
        'qq_settings': 'qqSettings',
        'reverse_dns_hostname': 'reverseDNSHostname',
        'system_domain': 'systemDomain',
        'type': 'type',
        'yahoo_settings': 'yahooSettings',
        'yandex_settings': 'yandexSettings',
        'zoho_settings': 'zohoSettings'
    }

    def __init__(self, aol_settings=None, auto_warmup_enabled=None, auto_warmup_stage=None, comcast_settings=None, created=None, default_settings=None, gmail_settings=None, gmx_settings=None, icloud_settings=None, id=None, mailru_settings=None, microsoft_settings=None, public_ip=None, qq_settings=None, reverse_dns_hostname=None, system_domain=None, type=None, yahoo_settings=None, yandex_settings=None, zoho_settings=None):  # noqa: E501
        """ModelsIP - a model defined in Swagger"""  # noqa: E501

        self._aol_settings = None
        self._auto_warmup_enabled = None
        self._auto_warmup_stage = None
        self._comcast_settings = None
        self._created = None
        self._default_settings = None
        self._gmail_settings = None
        self._gmx_settings = None
        self._icloud_settings = None
        self._id = None
        self._mailru_settings = None
        self._microsoft_settings = None
        self._public_ip = None
        self._qq_settings = None
        self._reverse_dns_hostname = None
        self._system_domain = None
        self._type = None
        self._yahoo_settings = None
        self._yandex_settings = None
        self._zoho_settings = None
        self.discriminator = None

        if aol_settings is not None:
            self.aol_settings = aol_settings
        if auto_warmup_enabled is not None:
            self.auto_warmup_enabled = auto_warmup_enabled
        if auto_warmup_stage is not None:
            self.auto_warmup_stage = auto_warmup_stage
        if comcast_settings is not None:
            self.comcast_settings = comcast_settings
        if created is not None:
            self.created = created
        if default_settings is not None:
            self.default_settings = default_settings
        if gmail_settings is not None:
            self.gmail_settings = gmail_settings
        if gmx_settings is not None:
            self.gmx_settings = gmx_settings
        if icloud_settings is not None:
            self.icloud_settings = icloud_settings
        if id is not None:
            self.id = id
        if mailru_settings is not None:
            self.mailru_settings = mailru_settings
        if microsoft_settings is not None:
            self.microsoft_settings = microsoft_settings
        if public_ip is not None:
            self.public_ip = public_ip
        if qq_settings is not None:
            self.qq_settings = qq_settings
        if reverse_dns_hostname is not None:
            self.reverse_dns_hostname = reverse_dns_hostname
        if system_domain is not None:
            self.system_domain = system_domain
        if type is not None:
            self.type = type
        if yahoo_settings is not None:
            self.yahoo_settings = yahoo_settings
        if yandex_settings is not None:
            self.yandex_settings = yandex_settings
        if zoho_settings is not None:
            self.zoho_settings = zoho_settings

    @property
    def aol_settings(self):
        """Gets the aol_settings of this ModelsIP.  # noqa: E501


        :return: The aol_settings of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._aol_settings

    @aol_settings.setter
    def aol_settings(self, aol_settings):
        """Sets the aol_settings of this ModelsIP.


        :param aol_settings: The aol_settings of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._aol_settings = aol_settings

    @property
    def auto_warmup_enabled(self):
        """Gets the auto_warmup_enabled of this ModelsIP.  # noqa: E501


        :return: The auto_warmup_enabled of this ModelsIP.  # noqa: E501
        :rtype: bool
        """
        return self._auto_warmup_enabled

    @auto_warmup_enabled.setter
    def auto_warmup_enabled(self, auto_warmup_enabled):
        """Sets the auto_warmup_enabled of this ModelsIP.


        :param auto_warmup_enabled: The auto_warmup_enabled of this ModelsIP.  # noqa: E501
        :type: bool
        """

        self._auto_warmup_enabled = auto_warmup_enabled

    @property
    def auto_warmup_stage(self):
        """Gets the auto_warmup_stage of this ModelsIP.  # noqa: E501


        :return: The auto_warmup_stage of this ModelsIP.  # noqa: E501
        :rtype: int
        """
        return self._auto_warmup_stage

    @auto_warmup_stage.setter
    def auto_warmup_stage(self, auto_warmup_stage):
        """Sets the auto_warmup_stage of this ModelsIP.


        :param auto_warmup_stage: The auto_warmup_stage of this ModelsIP.  # noqa: E501
        :type: int
        """

        self._auto_warmup_stage = auto_warmup_stage

    @property
    def comcast_settings(self):
        """Gets the comcast_settings of this ModelsIP.  # noqa: E501


        :return: The comcast_settings of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._comcast_settings

    @comcast_settings.setter
    def comcast_settings(self, comcast_settings):
        """Sets the comcast_settings of this ModelsIP.


        :param comcast_settings: The comcast_settings of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._comcast_settings = comcast_settings

    @property
    def created(self):
        """Gets the created of this ModelsIP.  # noqa: E501


        :return: The created of this ModelsIP.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ModelsIP.


        :param created: The created of this ModelsIP.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def default_settings(self):
        """Gets the default_settings of this ModelsIP.  # noqa: E501


        :return: The default_settings of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._default_settings

    @default_settings.setter
    def default_settings(self, default_settings):
        """Sets the default_settings of this ModelsIP.


        :param default_settings: The default_settings of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._default_settings = default_settings

    @property
    def gmail_settings(self):
        """Gets the gmail_settings of this ModelsIP.  # noqa: E501


        :return: The gmail_settings of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._gmail_settings

    @gmail_settings.setter
    def gmail_settings(self, gmail_settings):
        """Sets the gmail_settings of this ModelsIP.


        :param gmail_settings: The gmail_settings of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._gmail_settings = gmail_settings

    @property
    def gmx_settings(self):
        """Gets the gmx_settings of this ModelsIP.  # noqa: E501


        :return: The gmx_settings of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._gmx_settings

    @gmx_settings.setter
    def gmx_settings(self, gmx_settings):
        """Sets the gmx_settings of this ModelsIP.


        :param gmx_settings: The gmx_settings of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._gmx_settings = gmx_settings

    @property
    def icloud_settings(self):
        """Gets the icloud_settings of this ModelsIP.  # noqa: E501


        :return: The icloud_settings of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._icloud_settings

    @icloud_settings.setter
    def icloud_settings(self, icloud_settings):
        """Sets the icloud_settings of this ModelsIP.


        :param icloud_settings: The icloud_settings of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._icloud_settings = icloud_settings

    @property
    def id(self):
        """Gets the id of this ModelsIP.  # noqa: E501


        :return: The id of this ModelsIP.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsIP.


        :param id: The id of this ModelsIP.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mailru_settings(self):
        """Gets the mailru_settings of this ModelsIP.  # noqa: E501


        :return: The mailru_settings of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._mailru_settings

    @mailru_settings.setter
    def mailru_settings(self, mailru_settings):
        """Sets the mailru_settings of this ModelsIP.


        :param mailru_settings: The mailru_settings of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._mailru_settings = mailru_settings

    @property
    def microsoft_settings(self):
        """Gets the microsoft_settings of this ModelsIP.  # noqa: E501


        :return: The microsoft_settings of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._microsoft_settings

    @microsoft_settings.setter
    def microsoft_settings(self, microsoft_settings):
        """Sets the microsoft_settings of this ModelsIP.


        :param microsoft_settings: The microsoft_settings of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._microsoft_settings = microsoft_settings

    @property
    def public_ip(self):
        """Gets the public_ip of this ModelsIP.  # noqa: E501


        :return: The public_ip of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this ModelsIP.


        :param public_ip: The public_ip of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._public_ip = public_ip

    @property
    def qq_settings(self):
        """Gets the qq_settings of this ModelsIP.  # noqa: E501


        :return: The qq_settings of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._qq_settings

    @qq_settings.setter
    def qq_settings(self, qq_settings):
        """Sets the qq_settings of this ModelsIP.


        :param qq_settings: The qq_settings of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._qq_settings = qq_settings

    @property
    def reverse_dns_hostname(self):
        """Gets the reverse_dns_hostname of this ModelsIP.  # noqa: E501


        :return: The reverse_dns_hostname of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._reverse_dns_hostname

    @reverse_dns_hostname.setter
    def reverse_dns_hostname(self, reverse_dns_hostname):
        """Sets the reverse_dns_hostname of this ModelsIP.


        :param reverse_dns_hostname: The reverse_dns_hostname of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._reverse_dns_hostname = reverse_dns_hostname

    @property
    def system_domain(self):
        """Gets the system_domain of this ModelsIP.  # noqa: E501


        :return: The system_domain of this ModelsIP.  # noqa: E501
        :rtype: ModelsSystemDomain
        """
        return self._system_domain

    @system_domain.setter
    def system_domain(self, system_domain):
        """Sets the system_domain of this ModelsIP.


        :param system_domain: The system_domain of this ModelsIP.  # noqa: E501
        :type: ModelsSystemDomain
        """

        self._system_domain = system_domain

    @property
    def type(self):
        """Gets the type of this ModelsIP.  # noqa: E501


        :return: The type of this ModelsIP.  # noqa: E501
        :rtype: ModelsIPType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelsIP.


        :param type: The type of this ModelsIP.  # noqa: E501
        :type: ModelsIPType
        """

        self._type = type

    @property
    def yahoo_settings(self):
        """Gets the yahoo_settings of this ModelsIP.  # noqa: E501


        :return: The yahoo_settings of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._yahoo_settings

    @yahoo_settings.setter
    def yahoo_settings(self, yahoo_settings):
        """Sets the yahoo_settings of this ModelsIP.


        :param yahoo_settings: The yahoo_settings of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._yahoo_settings = yahoo_settings

    @property
    def yandex_settings(self):
        """Gets the yandex_settings of this ModelsIP.  # noqa: E501


        :return: The yandex_settings of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._yandex_settings

    @yandex_settings.setter
    def yandex_settings(self, yandex_settings):
        """Sets the yandex_settings of this ModelsIP.


        :param yandex_settings: The yandex_settings of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._yandex_settings = yandex_settings

    @property
    def zoho_settings(self):
        """Gets the zoho_settings of this ModelsIP.  # noqa: E501


        :return: The zoho_settings of this ModelsIP.  # noqa: E501
        :rtype: str
        """
        return self._zoho_settings

    @zoho_settings.setter
    def zoho_settings(self, zoho_settings):
        """Sets the zoho_settings of this ModelsIP.


        :param zoho_settings: The zoho_settings of this ModelsIP.  # noqa: E501
        :type: str
        """

        self._zoho_settings = zoho_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsIP, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsIP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
