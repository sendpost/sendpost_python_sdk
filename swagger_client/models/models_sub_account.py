# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsSubAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'created': 'int',
        'id': 'int',
        'labels': 'list[ModelsLabel]',
        'name': 'str',
        'smtp_auths': 'list[ModelsSMTPAuth]',
        'type': 'ModelsSubAccountType'
    }

    attribute_map = {
        'api_key': 'apiKey',
        'created': 'created',
        'id': 'id',
        'labels': 'labels',
        'name': 'name',
        'smtp_auths': 'smtpAuths',
        'type': 'type'
    }

    def __init__(self, api_key=None, created=None, id=None, labels=None, name=None, smtp_auths=None, type=None):  # noqa: E501
        """ModelsSubAccount - a model defined in Swagger"""  # noqa: E501

        self._api_key = None
        self._created = None
        self._id = None
        self._labels = None
        self._name = None
        self._smtp_auths = None
        self._type = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if labels is not None:
            self.labels = labels
        if name is not None:
            self.name = name
        if smtp_auths is not None:
            self.smtp_auths = smtp_auths
        if type is not None:
            self.type = type

    @property
    def api_key(self):
        """Gets the api_key of this ModelsSubAccount.  # noqa: E501


        :return: The api_key of this ModelsSubAccount.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ModelsSubAccount.


        :param api_key: The api_key of this ModelsSubAccount.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def created(self):
        """Gets the created of this ModelsSubAccount.  # noqa: E501


        :return: The created of this ModelsSubAccount.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ModelsSubAccount.


        :param created: The created of this ModelsSubAccount.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this ModelsSubAccount.  # noqa: E501


        :return: The id of this ModelsSubAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsSubAccount.


        :param id: The id of this ModelsSubAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this ModelsSubAccount.  # noqa: E501


        :return: The labels of this ModelsSubAccount.  # noqa: E501
        :rtype: list[ModelsLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ModelsSubAccount.


        :param labels: The labels of this ModelsSubAccount.  # noqa: E501
        :type: list[ModelsLabel]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ModelsSubAccount.  # noqa: E501


        :return: The name of this ModelsSubAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsSubAccount.


        :param name: The name of this ModelsSubAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def smtp_auths(self):
        """Gets the smtp_auths of this ModelsSubAccount.  # noqa: E501


        :return: The smtp_auths of this ModelsSubAccount.  # noqa: E501
        :rtype: list[ModelsSMTPAuth]
        """
        return self._smtp_auths

    @smtp_auths.setter
    def smtp_auths(self, smtp_auths):
        """Sets the smtp_auths of this ModelsSubAccount.


        :param smtp_auths: The smtp_auths of this ModelsSubAccount.  # noqa: E501
        :type: list[ModelsSMTPAuth]
        """

        self._smtp_auths = smtp_auths

    @property
    def type(self):
        """Gets the type of this ModelsSubAccount.  # noqa: E501


        :return: The type of this ModelsSubAccount.  # noqa: E501
        :rtype: ModelsSubAccountType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelsSubAccount.


        :param type: The type of this ModelsSubAccount.  # noqa: E501
        :type: ModelsSubAccountType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsSubAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsSubAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
