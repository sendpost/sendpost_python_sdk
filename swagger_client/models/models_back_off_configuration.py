# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsBackOffConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'concurrent_connections': 'int',
        'concurrent_connections_type': 'ModelsBackOffDecreaseType',
        'send_per_day': 'int',
        'send_per_day_type': 'ModelsBackOffDecreaseType',
        'send_per_hour': 'int',
        'send_per_hour_type': 'ModelsBackOffDecreaseType',
        'send_per_minute': 'int',
        'send_per_minute_type': 'ModelsBackOffDecreaseType'
    }

    attribute_map = {
        'concurrent_connections': 'concurrentConnections',
        'concurrent_connections_type': 'concurrentConnectionsType',
        'send_per_day': 'sendPerDay',
        'send_per_day_type': 'sendPerDayType',
        'send_per_hour': 'sendPerHour',
        'send_per_hour_type': 'sendPerHourType',
        'send_per_minute': 'sendPerMinute',
        'send_per_minute_type': 'sendPerMinuteType'
    }

    def __init__(self, concurrent_connections=None, concurrent_connections_type=None, send_per_day=None, send_per_day_type=None, send_per_hour=None, send_per_hour_type=None, send_per_minute=None, send_per_minute_type=None):  # noqa: E501
        """ModelsBackOffConfiguration - a model defined in Swagger"""  # noqa: E501

        self._concurrent_connections = None
        self._concurrent_connections_type = None
        self._send_per_day = None
        self._send_per_day_type = None
        self._send_per_hour = None
        self._send_per_hour_type = None
        self._send_per_minute = None
        self._send_per_minute_type = None
        self.discriminator = None

        if concurrent_connections is not None:
            self.concurrent_connections = concurrent_connections
        if concurrent_connections_type is not None:
            self.concurrent_connections_type = concurrent_connections_type
        if send_per_day is not None:
            self.send_per_day = send_per_day
        if send_per_day_type is not None:
            self.send_per_day_type = send_per_day_type
        if send_per_hour is not None:
            self.send_per_hour = send_per_hour
        if send_per_hour_type is not None:
            self.send_per_hour_type = send_per_hour_type
        if send_per_minute is not None:
            self.send_per_minute = send_per_minute
        if send_per_minute_type is not None:
            self.send_per_minute_type = send_per_minute_type

    @property
    def concurrent_connections(self):
        """Gets the concurrent_connections of this ModelsBackOffConfiguration.  # noqa: E501


        :return: The concurrent_connections of this ModelsBackOffConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._concurrent_connections

    @concurrent_connections.setter
    def concurrent_connections(self, concurrent_connections):
        """Sets the concurrent_connections of this ModelsBackOffConfiguration.


        :param concurrent_connections: The concurrent_connections of this ModelsBackOffConfiguration.  # noqa: E501
        :type: int
        """

        self._concurrent_connections = concurrent_connections

    @property
    def concurrent_connections_type(self):
        """Gets the concurrent_connections_type of this ModelsBackOffConfiguration.  # noqa: E501


        :return: The concurrent_connections_type of this ModelsBackOffConfiguration.  # noqa: E501
        :rtype: ModelsBackOffDecreaseType
        """
        return self._concurrent_connections_type

    @concurrent_connections_type.setter
    def concurrent_connections_type(self, concurrent_connections_type):
        """Sets the concurrent_connections_type of this ModelsBackOffConfiguration.


        :param concurrent_connections_type: The concurrent_connections_type of this ModelsBackOffConfiguration.  # noqa: E501
        :type: ModelsBackOffDecreaseType
        """

        self._concurrent_connections_type = concurrent_connections_type

    @property
    def send_per_day(self):
        """Gets the send_per_day of this ModelsBackOffConfiguration.  # noqa: E501


        :return: The send_per_day of this ModelsBackOffConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._send_per_day

    @send_per_day.setter
    def send_per_day(self, send_per_day):
        """Sets the send_per_day of this ModelsBackOffConfiguration.


        :param send_per_day: The send_per_day of this ModelsBackOffConfiguration.  # noqa: E501
        :type: int
        """

        self._send_per_day = send_per_day

    @property
    def send_per_day_type(self):
        """Gets the send_per_day_type of this ModelsBackOffConfiguration.  # noqa: E501


        :return: The send_per_day_type of this ModelsBackOffConfiguration.  # noqa: E501
        :rtype: ModelsBackOffDecreaseType
        """
        return self._send_per_day_type

    @send_per_day_type.setter
    def send_per_day_type(self, send_per_day_type):
        """Sets the send_per_day_type of this ModelsBackOffConfiguration.


        :param send_per_day_type: The send_per_day_type of this ModelsBackOffConfiguration.  # noqa: E501
        :type: ModelsBackOffDecreaseType
        """

        self._send_per_day_type = send_per_day_type

    @property
    def send_per_hour(self):
        """Gets the send_per_hour of this ModelsBackOffConfiguration.  # noqa: E501


        :return: The send_per_hour of this ModelsBackOffConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._send_per_hour

    @send_per_hour.setter
    def send_per_hour(self, send_per_hour):
        """Sets the send_per_hour of this ModelsBackOffConfiguration.


        :param send_per_hour: The send_per_hour of this ModelsBackOffConfiguration.  # noqa: E501
        :type: int
        """

        self._send_per_hour = send_per_hour

    @property
    def send_per_hour_type(self):
        """Gets the send_per_hour_type of this ModelsBackOffConfiguration.  # noqa: E501


        :return: The send_per_hour_type of this ModelsBackOffConfiguration.  # noqa: E501
        :rtype: ModelsBackOffDecreaseType
        """
        return self._send_per_hour_type

    @send_per_hour_type.setter
    def send_per_hour_type(self, send_per_hour_type):
        """Sets the send_per_hour_type of this ModelsBackOffConfiguration.


        :param send_per_hour_type: The send_per_hour_type of this ModelsBackOffConfiguration.  # noqa: E501
        :type: ModelsBackOffDecreaseType
        """

        self._send_per_hour_type = send_per_hour_type

    @property
    def send_per_minute(self):
        """Gets the send_per_minute of this ModelsBackOffConfiguration.  # noqa: E501


        :return: The send_per_minute of this ModelsBackOffConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._send_per_minute

    @send_per_minute.setter
    def send_per_minute(self, send_per_minute):
        """Sets the send_per_minute of this ModelsBackOffConfiguration.


        :param send_per_minute: The send_per_minute of this ModelsBackOffConfiguration.  # noqa: E501
        :type: int
        """

        self._send_per_minute = send_per_minute

    @property
    def send_per_minute_type(self):
        """Gets the send_per_minute_type of this ModelsBackOffConfiguration.  # noqa: E501


        :return: The send_per_minute_type of this ModelsBackOffConfiguration.  # noqa: E501
        :rtype: ModelsBackOffDecreaseType
        """
        return self._send_per_minute_type

    @send_per_minute_type.setter
    def send_per_minute_type(self, send_per_minute_type):
        """Sets the send_per_minute_type of this ModelsBackOffConfiguration.


        :param send_per_minute_type: The send_per_minute_type of this ModelsBackOffConfiguration.  # noqa: E501
        :type: ModelsBackOffDecreaseType
        """

        self._send_per_minute_type = send_per_minute_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsBackOffConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsBackOffConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
