# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsAlertRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'emails': 'object',
        'entity_type': 'str',
        'entity_value': 'int',
        'label': 'ModelsAlertLabel',
        'member': 'int',
        'name': 'str',
        'notification_type': 'ModelsNotificationType',
        'parameter': 'int',
        'provider': 'str',
        'slack_url': 'str',
        'threshold': 'str'
    }

    attribute_map = {
        'active': 'active',
        'emails': 'emails',
        'entity_type': 'entityType',
        'entity_value': 'entityValue',
        'label': 'label',
        'member': 'member',
        'name': 'name',
        'notification_type': 'notificationType',
        'parameter': 'parameter',
        'provider': 'provider',
        'slack_url': 'slackUrl',
        'threshold': 'threshold'
    }

    def __init__(self, active=None, emails=None, entity_type=None, entity_value=None, label=None, member=None, name=None, notification_type=None, parameter=None, provider=None, slack_url=None, threshold=None):  # noqa: E501
        """ModelsAlertRequest - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._emails = None
        self._entity_type = None
        self._entity_value = None
        self._label = None
        self._member = None
        self._name = None
        self._notification_type = None
        self._parameter = None
        self._provider = None
        self._slack_url = None
        self._threshold = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if emails is not None:
            self.emails = emails
        if entity_type is not None:
            self.entity_type = entity_type
        if entity_value is not None:
            self.entity_value = entity_value
        if label is not None:
            self.label = label
        if member is not None:
            self.member = member
        if name is not None:
            self.name = name
        if notification_type is not None:
            self.notification_type = notification_type
        if parameter is not None:
            self.parameter = parameter
        if provider is not None:
            self.provider = provider
        if slack_url is not None:
            self.slack_url = slack_url
        if threshold is not None:
            self.threshold = threshold

    @property
    def active(self):
        """Gets the active of this ModelsAlertRequest.  # noqa: E501


        :return: The active of this ModelsAlertRequest.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ModelsAlertRequest.


        :param active: The active of this ModelsAlertRequest.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def emails(self):
        """Gets the emails of this ModelsAlertRequest.  # noqa: E501


        :return: The emails of this ModelsAlertRequest.  # noqa: E501
        :rtype: object
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ModelsAlertRequest.


        :param emails: The emails of this ModelsAlertRequest.  # noqa: E501
        :type: object
        """

        self._emails = emails

    @property
    def entity_type(self):
        """Gets the entity_type of this ModelsAlertRequest.  # noqa: E501


        :return: The entity_type of this ModelsAlertRequest.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this ModelsAlertRequest.


        :param entity_type: The entity_type of this ModelsAlertRequest.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def entity_value(self):
        """Gets the entity_value of this ModelsAlertRequest.  # noqa: E501


        :return: The entity_value of this ModelsAlertRequest.  # noqa: E501
        :rtype: int
        """
        return self._entity_value

    @entity_value.setter
    def entity_value(self, entity_value):
        """Sets the entity_value of this ModelsAlertRequest.


        :param entity_value: The entity_value of this ModelsAlertRequest.  # noqa: E501
        :type: int
        """

        self._entity_value = entity_value

    @property
    def label(self):
        """Gets the label of this ModelsAlertRequest.  # noqa: E501


        :return: The label of this ModelsAlertRequest.  # noqa: E501
        :rtype: ModelsAlertLabel
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ModelsAlertRequest.


        :param label: The label of this ModelsAlertRequest.  # noqa: E501
        :type: ModelsAlertLabel
        """

        self._label = label

    @property
    def member(self):
        """Gets the member of this ModelsAlertRequest.  # noqa: E501


        :return: The member of this ModelsAlertRequest.  # noqa: E501
        :rtype: int
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this ModelsAlertRequest.


        :param member: The member of this ModelsAlertRequest.  # noqa: E501
        :type: int
        """

        self._member = member

    @property
    def name(self):
        """Gets the name of this ModelsAlertRequest.  # noqa: E501


        :return: The name of this ModelsAlertRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsAlertRequest.


        :param name: The name of this ModelsAlertRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notification_type(self):
        """Gets the notification_type of this ModelsAlertRequest.  # noqa: E501


        :return: The notification_type of this ModelsAlertRequest.  # noqa: E501
        :rtype: ModelsNotificationType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this ModelsAlertRequest.


        :param notification_type: The notification_type of this ModelsAlertRequest.  # noqa: E501
        :type: ModelsNotificationType
        """

        self._notification_type = notification_type

    @property
    def parameter(self):
        """Gets the parameter of this ModelsAlertRequest.  # noqa: E501


        :return: The parameter of this ModelsAlertRequest.  # noqa: E501
        :rtype: int
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this ModelsAlertRequest.


        :param parameter: The parameter of this ModelsAlertRequest.  # noqa: E501
        :type: int
        """

        self._parameter = parameter

    @property
    def provider(self):
        """Gets the provider of this ModelsAlertRequest.  # noqa: E501


        :return: The provider of this ModelsAlertRequest.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ModelsAlertRequest.


        :param provider: The provider of this ModelsAlertRequest.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def slack_url(self):
        """Gets the slack_url of this ModelsAlertRequest.  # noqa: E501


        :return: The slack_url of this ModelsAlertRequest.  # noqa: E501
        :rtype: str
        """
        return self._slack_url

    @slack_url.setter
    def slack_url(self, slack_url):
        """Sets the slack_url of this ModelsAlertRequest.


        :param slack_url: The slack_url of this ModelsAlertRequest.  # noqa: E501
        :type: str
        """

        self._slack_url = slack_url

    @property
    def threshold(self):
        """Gets the threshold of this ModelsAlertRequest.  # noqa: E501


        :return: The threshold of this ModelsAlertRequest.  # noqa: E501
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this ModelsAlertRequest.


        :param threshold: The threshold of this ModelsAlertRequest.  # noqa: E501
        :type: str
        """

        self._threshold = threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsAlertRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsAlertRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
