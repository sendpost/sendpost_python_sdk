# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsEditorTokenResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expires': 'str',
        'issued': 'str',
        'access_token': 'str',
        'asclient_id': 'str',
        'asregion': 'str',
        'expires_in': 'int',
        'refresh_token': 'str',
        'token_type': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'expires': '.expires',
        'issued': '.issued',
        'access_token': 'access_token',
        'asclient_id': 'as:client_id',
        'asregion': 'as:region',
        'expires_in': 'expires_in',
        'refresh_token': 'refresh_token',
        'token_type': 'token_type',
        'user_name': 'userName'
    }

    def __init__(self, expires=None, issued=None, access_token=None, asclient_id=None, asregion=None, expires_in=None, refresh_token=None, token_type=None, user_name=None):  # noqa: E501
        """ModelsEditorTokenResponse - a model defined in Swagger"""  # noqa: E501

        self._expires = None
        self._issued = None
        self._access_token = None
        self._asclient_id = None
        self._asregion = None
        self._expires_in = None
        self._refresh_token = None
        self._token_type = None
        self._user_name = None
        self.discriminator = None

        if expires is not None:
            self.expires = expires
        if issued is not None:
            self.issued = issued
        if access_token is not None:
            self.access_token = access_token
        if asclient_id is not None:
            self.asclient_id = asclient_id
        if asregion is not None:
            self.asregion = asregion
        if expires_in is not None:
            self.expires_in = expires_in
        if refresh_token is not None:
            self.refresh_token = refresh_token
        if token_type is not None:
            self.token_type = token_type
        if user_name is not None:
            self.user_name = user_name

    @property
    def expires(self):
        """Gets the expires of this ModelsEditorTokenResponse.  # noqa: E501


        :return: The expires of this ModelsEditorTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this ModelsEditorTokenResponse.


        :param expires: The expires of this ModelsEditorTokenResponse.  # noqa: E501
        :type: str
        """

        self._expires = expires

    @property
    def issued(self):
        """Gets the issued of this ModelsEditorTokenResponse.  # noqa: E501


        :return: The issued of this ModelsEditorTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._issued

    @issued.setter
    def issued(self, issued):
        """Sets the issued of this ModelsEditorTokenResponse.


        :param issued: The issued of this ModelsEditorTokenResponse.  # noqa: E501
        :type: str
        """

        self._issued = issued

    @property
    def access_token(self):
        """Gets the access_token of this ModelsEditorTokenResponse.  # noqa: E501


        :return: The access_token of this ModelsEditorTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this ModelsEditorTokenResponse.


        :param access_token: The access_token of this ModelsEditorTokenResponse.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def asclient_id(self):
        """Gets the asclient_id of this ModelsEditorTokenResponse.  # noqa: E501


        :return: The asclient_id of this ModelsEditorTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._asclient_id

    @asclient_id.setter
    def asclient_id(self, asclient_id):
        """Sets the asclient_id of this ModelsEditorTokenResponse.


        :param asclient_id: The asclient_id of this ModelsEditorTokenResponse.  # noqa: E501
        :type: str
        """

        self._asclient_id = asclient_id

    @property
    def asregion(self):
        """Gets the asregion of this ModelsEditorTokenResponse.  # noqa: E501


        :return: The asregion of this ModelsEditorTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._asregion

    @asregion.setter
    def asregion(self, asregion):
        """Sets the asregion of this ModelsEditorTokenResponse.


        :param asregion: The asregion of this ModelsEditorTokenResponse.  # noqa: E501
        :type: str
        """

        self._asregion = asregion

    @property
    def expires_in(self):
        """Gets the expires_in of this ModelsEditorTokenResponse.  # noqa: E501


        :return: The expires_in of this ModelsEditorTokenResponse.  # noqa: E501
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this ModelsEditorTokenResponse.


        :param expires_in: The expires_in of this ModelsEditorTokenResponse.  # noqa: E501
        :type: int
        """

        self._expires_in = expires_in

    @property
    def refresh_token(self):
        """Gets the refresh_token of this ModelsEditorTokenResponse.  # noqa: E501


        :return: The refresh_token of this ModelsEditorTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this ModelsEditorTokenResponse.


        :param refresh_token: The refresh_token of this ModelsEditorTokenResponse.  # noqa: E501
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def token_type(self):
        """Gets the token_type of this ModelsEditorTokenResponse.  # noqa: E501


        :return: The token_type of this ModelsEditorTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this ModelsEditorTokenResponse.


        :param token_type: The token_type of this ModelsEditorTokenResponse.  # noqa: E501
        :type: str
        """

        self._token_type = token_type

    @property
    def user_name(self):
        """Gets the user_name of this ModelsEditorTokenResponse.  # noqa: E501


        :return: The user_name of this ModelsEditorTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ModelsEditorTokenResponse.


        :param user_name: The user_name of this ModelsEditorTokenResponse.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsEditorTokenResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsEditorTokenResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
