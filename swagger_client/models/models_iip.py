# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsIIP(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'back_off_configuration': 'ModelsBackOffConfiguration',
        'back_off_trigger': 'ModelsBackOffTrigger',
        'max_concurrent_connections': 'int',
        'max_send_per_day': 'int',
        'max_send_per_hour': 'int',
        'max_send_per_minute': 'int',
        'name': 'str'
    }

    attribute_map = {
        'back_off_configuration': 'backOffConfiguration',
        'back_off_trigger': 'backOffTrigger',
        'max_concurrent_connections': 'maxConcurrentConnections',
        'max_send_per_day': 'maxSendPerDay',
        'max_send_per_hour': 'maxSendPerHour',
        'max_send_per_minute': 'maxSendPerMinute',
        'name': 'name'
    }

    def __init__(self, back_off_configuration=None, back_off_trigger=None, max_concurrent_connections=None, max_send_per_day=None, max_send_per_hour=None, max_send_per_minute=None, name=None):  # noqa: E501
        """ModelsIIP - a model defined in Swagger"""  # noqa: E501

        self._back_off_configuration = None
        self._back_off_trigger = None
        self._max_concurrent_connections = None
        self._max_send_per_day = None
        self._max_send_per_hour = None
        self._max_send_per_minute = None
        self._name = None
        self.discriminator = None

        if back_off_configuration is not None:
            self.back_off_configuration = back_off_configuration
        if back_off_trigger is not None:
            self.back_off_trigger = back_off_trigger
        if max_concurrent_connections is not None:
            self.max_concurrent_connections = max_concurrent_connections
        if max_send_per_day is not None:
            self.max_send_per_day = max_send_per_day
        if max_send_per_hour is not None:
            self.max_send_per_hour = max_send_per_hour
        if max_send_per_minute is not None:
            self.max_send_per_minute = max_send_per_minute
        if name is not None:
            self.name = name

    @property
    def back_off_configuration(self):
        """Gets the back_off_configuration of this ModelsIIP.  # noqa: E501


        :return: The back_off_configuration of this ModelsIIP.  # noqa: E501
        :rtype: ModelsBackOffConfiguration
        """
        return self._back_off_configuration

    @back_off_configuration.setter
    def back_off_configuration(self, back_off_configuration):
        """Sets the back_off_configuration of this ModelsIIP.


        :param back_off_configuration: The back_off_configuration of this ModelsIIP.  # noqa: E501
        :type: ModelsBackOffConfiguration
        """

        self._back_off_configuration = back_off_configuration

    @property
    def back_off_trigger(self):
        """Gets the back_off_trigger of this ModelsIIP.  # noqa: E501


        :return: The back_off_trigger of this ModelsIIP.  # noqa: E501
        :rtype: ModelsBackOffTrigger
        """
        return self._back_off_trigger

    @back_off_trigger.setter
    def back_off_trigger(self, back_off_trigger):
        """Sets the back_off_trigger of this ModelsIIP.


        :param back_off_trigger: The back_off_trigger of this ModelsIIP.  # noqa: E501
        :type: ModelsBackOffTrigger
        """

        self._back_off_trigger = back_off_trigger

    @property
    def max_concurrent_connections(self):
        """Gets the max_concurrent_connections of this ModelsIIP.  # noqa: E501


        :return: The max_concurrent_connections of this ModelsIIP.  # noqa: E501
        :rtype: int
        """
        return self._max_concurrent_connections

    @max_concurrent_connections.setter
    def max_concurrent_connections(self, max_concurrent_connections):
        """Sets the max_concurrent_connections of this ModelsIIP.


        :param max_concurrent_connections: The max_concurrent_connections of this ModelsIIP.  # noqa: E501
        :type: int
        """

        self._max_concurrent_connections = max_concurrent_connections

    @property
    def max_send_per_day(self):
        """Gets the max_send_per_day of this ModelsIIP.  # noqa: E501


        :return: The max_send_per_day of this ModelsIIP.  # noqa: E501
        :rtype: int
        """
        return self._max_send_per_day

    @max_send_per_day.setter
    def max_send_per_day(self, max_send_per_day):
        """Sets the max_send_per_day of this ModelsIIP.


        :param max_send_per_day: The max_send_per_day of this ModelsIIP.  # noqa: E501
        :type: int
        """

        self._max_send_per_day = max_send_per_day

    @property
    def max_send_per_hour(self):
        """Gets the max_send_per_hour of this ModelsIIP.  # noqa: E501


        :return: The max_send_per_hour of this ModelsIIP.  # noqa: E501
        :rtype: int
        """
        return self._max_send_per_hour

    @max_send_per_hour.setter
    def max_send_per_hour(self, max_send_per_hour):
        """Sets the max_send_per_hour of this ModelsIIP.


        :param max_send_per_hour: The max_send_per_hour of this ModelsIIP.  # noqa: E501
        :type: int
        """

        self._max_send_per_hour = max_send_per_hour

    @property
    def max_send_per_minute(self):
        """Gets the max_send_per_minute of this ModelsIIP.  # noqa: E501


        :return: The max_send_per_minute of this ModelsIIP.  # noqa: E501
        :rtype: int
        """
        return self._max_send_per_minute

    @max_send_per_minute.setter
    def max_send_per_minute(self, max_send_per_minute):
        """Sets the max_send_per_minute of this ModelsIIP.


        :param max_send_per_minute: The max_send_per_minute of this ModelsIIP.  # noqa: E501
        :type: int
        """

        self._max_send_per_minute = max_send_per_minute

    @property
    def name(self):
        """Gets the name of this ModelsIIP.  # noqa: E501


        :return: The name of this ModelsIIP.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsIIP.


        :param name: The name of this ModelsIIP.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsIIP, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsIIP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
