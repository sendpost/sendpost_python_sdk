# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsBackOffTrigger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deferral_percentage': 'int',
        'duration_in_minutes': 'int',
        'hard_bounce_percentage': 'int',
        'minimum_attempts': 'int'
    }

    attribute_map = {
        'deferral_percentage': 'deferralPercentage',
        'duration_in_minutes': 'durationInMinutes',
        'hard_bounce_percentage': 'hardBouncePercentage',
        'minimum_attempts': 'minimumAttempts'
    }

    def __init__(self, deferral_percentage=None, duration_in_minutes=None, hard_bounce_percentage=None, minimum_attempts=None):  # noqa: E501
        """ModelsBackOffTrigger - a model defined in Swagger"""  # noqa: E501

        self._deferral_percentage = None
        self._duration_in_minutes = None
        self._hard_bounce_percentage = None
        self._minimum_attempts = None
        self.discriminator = None

        if deferral_percentage is not None:
            self.deferral_percentage = deferral_percentage
        if duration_in_minutes is not None:
            self.duration_in_minutes = duration_in_minutes
        if hard_bounce_percentage is not None:
            self.hard_bounce_percentage = hard_bounce_percentage
        if minimum_attempts is not None:
            self.minimum_attempts = minimum_attempts

    @property
    def deferral_percentage(self):
        """Gets the deferral_percentage of this ModelsBackOffTrigger.  # noqa: E501


        :return: The deferral_percentage of this ModelsBackOffTrigger.  # noqa: E501
        :rtype: int
        """
        return self._deferral_percentage

    @deferral_percentage.setter
    def deferral_percentage(self, deferral_percentage):
        """Sets the deferral_percentage of this ModelsBackOffTrigger.


        :param deferral_percentage: The deferral_percentage of this ModelsBackOffTrigger.  # noqa: E501
        :type: int
        """

        self._deferral_percentage = deferral_percentage

    @property
    def duration_in_minutes(self):
        """Gets the duration_in_minutes of this ModelsBackOffTrigger.  # noqa: E501


        :return: The duration_in_minutes of this ModelsBackOffTrigger.  # noqa: E501
        :rtype: int
        """
        return self._duration_in_minutes

    @duration_in_minutes.setter
    def duration_in_minutes(self, duration_in_minutes):
        """Sets the duration_in_minutes of this ModelsBackOffTrigger.


        :param duration_in_minutes: The duration_in_minutes of this ModelsBackOffTrigger.  # noqa: E501
        :type: int
        """

        self._duration_in_minutes = duration_in_minutes

    @property
    def hard_bounce_percentage(self):
        """Gets the hard_bounce_percentage of this ModelsBackOffTrigger.  # noqa: E501


        :return: The hard_bounce_percentage of this ModelsBackOffTrigger.  # noqa: E501
        :rtype: int
        """
        return self._hard_bounce_percentage

    @hard_bounce_percentage.setter
    def hard_bounce_percentage(self, hard_bounce_percentage):
        """Sets the hard_bounce_percentage of this ModelsBackOffTrigger.


        :param hard_bounce_percentage: The hard_bounce_percentage of this ModelsBackOffTrigger.  # noqa: E501
        :type: int
        """

        self._hard_bounce_percentage = hard_bounce_percentage

    @property
    def minimum_attempts(self):
        """Gets the minimum_attempts of this ModelsBackOffTrigger.  # noqa: E501


        :return: The minimum_attempts of this ModelsBackOffTrigger.  # noqa: E501
        :rtype: int
        """
        return self._minimum_attempts

    @minimum_attempts.setter
    def minimum_attempts(self, minimum_attempts):
        """Sets the minimum_attempts of this ModelsBackOffTrigger.


        :param minimum_attempts: The minimum_attempts of this ModelsBackOffTrigger.  # noqa: E501
        :type: int
        """

        self._minimum_attempts = minimum_attempts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsBackOffTrigger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsBackOffTrigger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
