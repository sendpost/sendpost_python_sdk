# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsWMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'groups': 'object',
        'ipid': 'int',
        'message_type': 'str',
        'message_uuid': 'str',
        'mock_message': 'bool',
        'mock_time_shift': 'int',
        'smtp_code': 'int',
        'smtp_description': 'str',
        'sub_account_id': 'int',
        'to': 'str',
        'type': 'ModelsEventType'
    }

    attribute_map = {
        'account_id': 'AccountID',
        'groups': 'Groups',
        'ipid': 'IPID',
        'message_type': 'MessageType',
        'message_uuid': 'MessageUUID',
        'mock_message': 'MockMessage',
        'mock_time_shift': 'MockTimeShift',
        'smtp_code': 'SMTPCode',
        'smtp_description': 'SMTPDescription',
        'sub_account_id': 'SubAccountID',
        'to': 'To',
        'type': 'Type'
    }

    def __init__(self, account_id=None, groups=None, ipid=None, message_type=None, message_uuid=None, mock_message=None, mock_time_shift=None, smtp_code=None, smtp_description=None, sub_account_id=None, to=None, type=None):  # noqa: E501
        """ModelsWMessage - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._groups = None
        self._ipid = None
        self._message_type = None
        self._message_uuid = None
        self._mock_message = None
        self._mock_time_shift = None
        self._smtp_code = None
        self._smtp_description = None
        self._sub_account_id = None
        self._to = None
        self._type = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if groups is not None:
            self.groups = groups
        if ipid is not None:
            self.ipid = ipid
        if message_type is not None:
            self.message_type = message_type
        if message_uuid is not None:
            self.message_uuid = message_uuid
        if mock_message is not None:
            self.mock_message = mock_message
        if mock_time_shift is not None:
            self.mock_time_shift = mock_time_shift
        if smtp_code is not None:
            self.smtp_code = smtp_code
        if smtp_description is not None:
            self.smtp_description = smtp_description
        if sub_account_id is not None:
            self.sub_account_id = sub_account_id
        if to is not None:
            self.to = to
        if type is not None:
            self.type = type

    @property
    def account_id(self):
        """Gets the account_id of this ModelsWMessage.  # noqa: E501


        :return: The account_id of this ModelsWMessage.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ModelsWMessage.


        :param account_id: The account_id of this ModelsWMessage.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def groups(self):
        """Gets the groups of this ModelsWMessage.  # noqa: E501


        :return: The groups of this ModelsWMessage.  # noqa: E501
        :rtype: object
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ModelsWMessage.


        :param groups: The groups of this ModelsWMessage.  # noqa: E501
        :type: object
        """

        self._groups = groups

    @property
    def ipid(self):
        """Gets the ipid of this ModelsWMessage.  # noqa: E501


        :return: The ipid of this ModelsWMessage.  # noqa: E501
        :rtype: int
        """
        return self._ipid

    @ipid.setter
    def ipid(self, ipid):
        """Sets the ipid of this ModelsWMessage.


        :param ipid: The ipid of this ModelsWMessage.  # noqa: E501
        :type: int
        """

        self._ipid = ipid

    @property
    def message_type(self):
        """Gets the message_type of this ModelsWMessage.  # noqa: E501


        :return: The message_type of this ModelsWMessage.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this ModelsWMessage.


        :param message_type: The message_type of this ModelsWMessage.  # noqa: E501
        :type: str
        """

        self._message_type = message_type

    @property
    def message_uuid(self):
        """Gets the message_uuid of this ModelsWMessage.  # noqa: E501


        :return: The message_uuid of this ModelsWMessage.  # noqa: E501
        :rtype: str
        """
        return self._message_uuid

    @message_uuid.setter
    def message_uuid(self, message_uuid):
        """Sets the message_uuid of this ModelsWMessage.


        :param message_uuid: The message_uuid of this ModelsWMessage.  # noqa: E501
        :type: str
        """

        self._message_uuid = message_uuid

    @property
    def mock_message(self):
        """Gets the mock_message of this ModelsWMessage.  # noqa: E501


        :return: The mock_message of this ModelsWMessage.  # noqa: E501
        :rtype: bool
        """
        return self._mock_message

    @mock_message.setter
    def mock_message(self, mock_message):
        """Sets the mock_message of this ModelsWMessage.


        :param mock_message: The mock_message of this ModelsWMessage.  # noqa: E501
        :type: bool
        """

        self._mock_message = mock_message

    @property
    def mock_time_shift(self):
        """Gets the mock_time_shift of this ModelsWMessage.  # noqa: E501


        :return: The mock_time_shift of this ModelsWMessage.  # noqa: E501
        :rtype: int
        """
        return self._mock_time_shift

    @mock_time_shift.setter
    def mock_time_shift(self, mock_time_shift):
        """Sets the mock_time_shift of this ModelsWMessage.


        :param mock_time_shift: The mock_time_shift of this ModelsWMessage.  # noqa: E501
        :type: int
        """

        self._mock_time_shift = mock_time_shift

    @property
    def smtp_code(self):
        """Gets the smtp_code of this ModelsWMessage.  # noqa: E501


        :return: The smtp_code of this ModelsWMessage.  # noqa: E501
        :rtype: int
        """
        return self._smtp_code

    @smtp_code.setter
    def smtp_code(self, smtp_code):
        """Sets the smtp_code of this ModelsWMessage.


        :param smtp_code: The smtp_code of this ModelsWMessage.  # noqa: E501
        :type: int
        """

        self._smtp_code = smtp_code

    @property
    def smtp_description(self):
        """Gets the smtp_description of this ModelsWMessage.  # noqa: E501


        :return: The smtp_description of this ModelsWMessage.  # noqa: E501
        :rtype: str
        """
        return self._smtp_description

    @smtp_description.setter
    def smtp_description(self, smtp_description):
        """Sets the smtp_description of this ModelsWMessage.


        :param smtp_description: The smtp_description of this ModelsWMessage.  # noqa: E501
        :type: str
        """

        self._smtp_description = smtp_description

    @property
    def sub_account_id(self):
        """Gets the sub_account_id of this ModelsWMessage.  # noqa: E501


        :return: The sub_account_id of this ModelsWMessage.  # noqa: E501
        :rtype: int
        """
        return self._sub_account_id

    @sub_account_id.setter
    def sub_account_id(self, sub_account_id):
        """Sets the sub_account_id of this ModelsWMessage.


        :param sub_account_id: The sub_account_id of this ModelsWMessage.  # noqa: E501
        :type: int
        """

        self._sub_account_id = sub_account_id

    @property
    def to(self):
        """Gets the to of this ModelsWMessage.  # noqa: E501


        :return: The to of this ModelsWMessage.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ModelsWMessage.


        :param to: The to of this ModelsWMessage.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def type(self):
        """Gets the type of this ModelsWMessage.  # noqa: E501


        :return: The type of this ModelsWMessage.  # noqa: E501
        :rtype: ModelsEventType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelsWMessage.


        :param type: The type of this ModelsWMessage.  # noqa: E501
        :type: ModelsEventType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsWMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsWMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
