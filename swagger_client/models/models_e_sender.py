# coding: utf-8

"""
    SendPost API

    SendPost API to send transactional emails reliably  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@sendx.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelsESender(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'from_email': 'str',
        'name': 'str',
        'reply_to_email': 'str'
    }

    attribute_map = {
        'domain': 'domain',
        'from_email': 'fromEmail',
        'name': 'name',
        'reply_to_email': 'replyToEmail'
    }

    def __init__(self, domain=None, from_email=None, name=None, reply_to_email=None):  # noqa: E501
        """ModelsESender - a model defined in Swagger"""  # noqa: E501

        self._domain = None
        self._from_email = None
        self._name = None
        self._reply_to_email = None
        self.discriminator = None

        if domain is not None:
            self.domain = domain
        if from_email is not None:
            self.from_email = from_email
        if name is not None:
            self.name = name
        if reply_to_email is not None:
            self.reply_to_email = reply_to_email

    @property
    def domain(self):
        """Gets the domain of this ModelsESender.  # noqa: E501


        :return: The domain of this ModelsESender.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ModelsESender.


        :param domain: The domain of this ModelsESender.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def from_email(self):
        """Gets the from_email of this ModelsESender.  # noqa: E501


        :return: The from_email of this ModelsESender.  # noqa: E501
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this ModelsESender.


        :param from_email: The from_email of this ModelsESender.  # noqa: E501
        :type: str
        """

        self._from_email = from_email

    @property
    def name(self):
        """Gets the name of this ModelsESender.  # noqa: E501


        :return: The name of this ModelsESender.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsESender.


        :param name: The name of this ModelsESender.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reply_to_email(self):
        """Gets the reply_to_email of this ModelsESender.  # noqa: E501


        :return: The reply_to_email of this ModelsESender.  # noqa: E501
        :rtype: str
        """
        return self._reply_to_email

    @reply_to_email.setter
    def reply_to_email(self, reply_to_email):
        """Sets the reply_to_email of this ModelsESender.


        :param reply_to_email: The reply_to_email of this ModelsESender.  # noqa: E501
        :type: str
        """

        self._reply_to_email = reply_to_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsESender, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsESender):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
