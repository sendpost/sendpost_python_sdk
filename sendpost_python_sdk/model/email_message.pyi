# coding: utf-8

"""
    SendPost API

    Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: hello@sendpost.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sendpost_python_sdk import schemas  # noqa: F401


class EmailMessage(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class attachments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Attachment']:
                        return Attachment
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Attachment'], typing.List['Attachment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attachments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Attachment':
                    return super().__getitem__(i)
        
            @staticmethod
            def _from() -> typing.Type['ModelFrom']:
                return ModelFrom
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            htmlBody = schemas.StrSchema
            ippool = schemas.StrSchema
            preText = schemas.StrSchema
        
            @staticmethod
            def replyTo() -> typing.Type['ReplyTo']:
                return ReplyTo
            subject = schemas.StrSchema
            template = schemas.StrSchema
            textBody = schemas.StrSchema
            
            
            class to(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['To']:
                        return To
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['To'], typing.List['To']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'to':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'To':
                    return super().__getitem__(i)
            trackClicks = schemas.BoolSchema
            trackOpens = schemas.BoolSchema
            headers = schemas.DictSchema
            ampBody = schemas.StrSchema
            __annotations__ = {
                "attachments": attachments,
                "from": _from,
                "groups": groups,
                "htmlBody": htmlBody,
                "ippool": ippool,
                "preText": preText,
                "replyTo": replyTo,
                "subject": subject,
                "template": template,
                "textBody": textBody,
                "to": to,
                "trackClicks": trackClicks,
                "trackOpens": trackOpens,
                "headers": headers,
                "ampBody": ampBody,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> MetaOapg.properties.attachments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> 'ModelFrom': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["htmlBody"]) -> MetaOapg.properties.htmlBody: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ippool"]) -> MetaOapg.properties.ippool: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preText"]) -> MetaOapg.properties.preText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replyTo"]) -> 'ReplyTo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template"]) -> MetaOapg.properties.template: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["textBody"]) -> MetaOapg.properties.textBody: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackClicks"]) -> MetaOapg.properties.trackClicks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackOpens"]) -> MetaOapg.properties.trackOpens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["headers"]) -> MetaOapg.properties.headers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ampBody"]) -> MetaOapg.properties.ampBody: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attachments", "from", "groups", "htmlBody", "ippool", "preText", "replyTo", "subject", "template", "textBody", "to", "trackClicks", "trackOpens", "headers", "ampBody", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union[MetaOapg.properties.attachments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union['ModelFrom', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union[MetaOapg.properties.groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["htmlBody"]) -> typing.Union[MetaOapg.properties.htmlBody, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ippool"]) -> typing.Union[MetaOapg.properties.ippool, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preText"]) -> typing.Union[MetaOapg.properties.preText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replyTo"]) -> typing.Union['ReplyTo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template"]) -> typing.Union[MetaOapg.properties.template, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["textBody"]) -> typing.Union[MetaOapg.properties.textBody, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union[MetaOapg.properties.to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackClicks"]) -> typing.Union[MetaOapg.properties.trackClicks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackOpens"]) -> typing.Union[MetaOapg.properties.trackOpens, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["headers"]) -> typing.Union[MetaOapg.properties.headers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ampBody"]) -> typing.Union[MetaOapg.properties.ampBody, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attachments", "from", "groups", "htmlBody", "ippool", "preText", "replyTo", "subject", "template", "textBody", "to", "trackClicks", "trackOpens", "headers", "ampBody", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        attachments: typing.Union[MetaOapg.properties.attachments, list, tuple, schemas.Unset] = schemas.unset,
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, schemas.Unset] = schemas.unset,
        htmlBody: typing.Union[MetaOapg.properties.htmlBody, str, schemas.Unset] = schemas.unset,
        ippool: typing.Union[MetaOapg.properties.ippool, str, schemas.Unset] = schemas.unset,
        preText: typing.Union[MetaOapg.properties.preText, str, schemas.Unset] = schemas.unset,
        replyTo: typing.Union['ReplyTo', schemas.Unset] = schemas.unset,
        subject: typing.Union[MetaOapg.properties.subject, str, schemas.Unset] = schemas.unset,
        template: typing.Union[MetaOapg.properties.template, str, schemas.Unset] = schemas.unset,
        textBody: typing.Union[MetaOapg.properties.textBody, str, schemas.Unset] = schemas.unset,
        to: typing.Union[MetaOapg.properties.to, list, tuple, schemas.Unset] = schemas.unset,
        trackClicks: typing.Union[MetaOapg.properties.trackClicks, bool, schemas.Unset] = schemas.unset,
        trackOpens: typing.Union[MetaOapg.properties.trackOpens, bool, schemas.Unset] = schemas.unset,
        headers: typing.Union[MetaOapg.properties.headers, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ampBody: typing.Union[MetaOapg.properties.ampBody, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmailMessage':
        return super().__new__(
            cls,
            *_args,
            attachments=attachments,
            groups=groups,
            htmlBody=htmlBody,
            ippool=ippool,
            preText=preText,
            replyTo=replyTo,
            subject=subject,
            template=template,
            textBody=textBody,
            to=to,
            trackClicks=trackClicks,
            trackOpens=trackOpens,
            headers=headers,
            ampBody=ampBody,
            _configuration=_configuration,
            **kwargs,
        )

from sendpost_python_sdk.model.attachment import Attachment
from sendpost_python_sdk.model.model_from import ModelFrom
from sendpost_python_sdk.model.reply_to import ReplyTo
from sendpost_python_sdk.model.to import To
