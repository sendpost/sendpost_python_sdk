# coding: utf-8

"""
    SendPost API

    Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: hello@sendpost.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sendpost_python_sdk import schemas  # noqa: F401


class QEvent(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            accountID = schemas.Int64Schema
            eventID = schemas.StrSchema
        
            @staticmethod
            def eventMetadata() -> typing.Type['EventMetadata']:
                return EventMetadata
            _from = schemas.StrSchema
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            ipID = schemas.Int64Schema
            messageID = schemas.StrSchema
            messageType = schemas.StrSchema
            subAccountID = schemas.Int64Schema
            submittedAt = schemas.Int64Schema
            to = schemas.StrSchema
            tpspId = schemas.Int64Schema
            type = schemas.Int64Schema
            __annotations__ = {
                "accountID": accountID,
                "eventID": eventID,
                "eventMetadata": eventMetadata,
                "from": _from,
                "groups": groups,
                "ipID": ipID,
                "messageID": messageID,
                "messageType": messageType,
                "subAccountID": subAccountID,
                "submittedAt": submittedAt,
                "to": to,
                "tpspId": tpspId,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountID"]) -> MetaOapg.properties.accountID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventID"]) -> MetaOapg.properties.eventID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventMetadata"]) -> 'EventMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipID"]) -> MetaOapg.properties.ipID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messageID"]) -> MetaOapg.properties.messageID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messageType"]) -> MetaOapg.properties.messageType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subAccountID"]) -> MetaOapg.properties.subAccountID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submittedAt"]) -> MetaOapg.properties.submittedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tpspId"]) -> MetaOapg.properties.tpspId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountID", "eventID", "eventMetadata", "from", "groups", "ipID", "messageID", "messageType", "subAccountID", "submittedAt", "to", "tpspId", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountID"]) -> typing.Union[MetaOapg.properties.accountID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventID"]) -> typing.Union[MetaOapg.properties.eventID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventMetadata"]) -> typing.Union['EventMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union[MetaOapg.properties.groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipID"]) -> typing.Union[MetaOapg.properties.ipID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messageID"]) -> typing.Union[MetaOapg.properties.messageID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messageType"]) -> typing.Union[MetaOapg.properties.messageType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subAccountID"]) -> typing.Union[MetaOapg.properties.subAccountID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submittedAt"]) -> typing.Union[MetaOapg.properties.submittedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union[MetaOapg.properties.to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tpspId"]) -> typing.Union[MetaOapg.properties.tpspId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountID", "eventID", "eventMetadata", "from", "groups", "ipID", "messageID", "messageType", "subAccountID", "submittedAt", "to", "tpspId", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        accountID: typing.Union[MetaOapg.properties.accountID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        eventID: typing.Union[MetaOapg.properties.eventID, str, schemas.Unset] = schemas.unset,
        eventMetadata: typing.Union['EventMetadata', schemas.Unset] = schemas.unset,
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, schemas.Unset] = schemas.unset,
        ipID: typing.Union[MetaOapg.properties.ipID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        messageID: typing.Union[MetaOapg.properties.messageID, str, schemas.Unset] = schemas.unset,
        messageType: typing.Union[MetaOapg.properties.messageType, str, schemas.Unset] = schemas.unset,
        subAccountID: typing.Union[MetaOapg.properties.subAccountID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        submittedAt: typing.Union[MetaOapg.properties.submittedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        to: typing.Union[MetaOapg.properties.to, str, schemas.Unset] = schemas.unset,
        tpspId: typing.Union[MetaOapg.properties.tpspId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QEvent':
        return super().__new__(
            cls,
            *_args,
            accountID=accountID,
            eventID=eventID,
            eventMetadata=eventMetadata,
            groups=groups,
            ipID=ipID,
            messageID=messageID,
            messageType=messageType,
            subAccountID=subAccountID,
            submittedAt=submittedAt,
            to=to,
            tpspId=tpspId,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from sendpost_python_sdk.model.event_metadata import EventMetadata
